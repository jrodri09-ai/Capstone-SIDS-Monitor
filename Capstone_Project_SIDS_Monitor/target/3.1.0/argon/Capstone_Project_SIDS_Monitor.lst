
/Users/jessicamacbookpro/Documents/IoT/Capstone-SIDS-Monitor/Capstone_Project_SIDS_Monitor/target/3.1.0/argon/Capstone_Project_SIDS_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003274  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b7290  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000478  2003e164  000b7294  0001e164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000214  2003e5e0  2003e5e0  0002e5e0  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000b770c  000b770c  0002770c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b7734  000b7734  00027734  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000fb192  00000000  00000000  00027738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00011749  00000000  00000000  001228ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    000352ae  00000000  00000000  00134013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002ab0  00000000  00000000  001692c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00009668  00000000  00000000  0016bd71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003630d  00000000  00000000  001753d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003a7ad  00000000  00000000  001ab6e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00123cc4  00000000  00000000  001e5e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  0000780c  00000000  00000000  00309b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fcd7 	bl	b69e0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fcdf 	bl	b69fc <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e164 	.word	0x2003e164
   b4048:	000b7294 	.word	0x000b7294
   b404c:	2003e5dc 	.word	0x2003e5dc
   b4050:	2003e5e0 	.word	0x2003e5e0
   b4054:	2003e7f4 	.word	0x2003e7f4

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 ff51 	bl	b5f04 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42a5      	cmp	r5, r4
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b726c 	.word	0x000b726c
   b407c:	000b7290 	.word	0x000b7290

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b836 	b.w	b40f0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f867 	bl	b4158 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bef1 	b.w	b5e74 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f001 b897 	b.w	b51c4 <malloc>

000b4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b4096:	f001 b89d 	b.w	b51d4 <free>
	...

000b409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b409e:	4a03      	ldr	r2, [pc, #12]	; (b40ac <__cxa_pure_virtual+0x10>)
   b40a0:	2100      	movs	r1, #0
   b40a2:	200c      	movs	r0, #12
   b40a4:	f000 ffca 	bl	b503c <panic_>
  while (1);
   b40a8:	e7fe      	b.n	b40a8 <__cxa_pure_virtual+0xc>
   b40aa:	bf00      	nop
   b40ac:	000b4d5d 	.word	0x000b4d5d

000b40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b0:	7800      	ldrb	r0, [r0, #0]
   b40b2:	fab0 f080 	clz	r0, r0
   b40b6:	0940      	lsrs	r0, r0, #5
   b40b8:	4770      	bx	lr

000b40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ba:	2301      	movs	r3, #1
   b40bc:	7003      	strb	r3, [r0, #0]
   b40be:	4770      	bx	lr

000b40c0 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b40c0:	4770      	bx	lr

000b40c2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   b40c2:	b510      	push	{r4, lr}
   b40c4:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b40c6:	6800      	ldr	r0, [r0, #0]
   b40c8:	b108      	cbz	r0, b40ce <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   b40ca:	f001 f883 	bl	b51d4 <free>
class SystemClass {
   b40ce:	4620      	mov	r0, r4
   b40d0:	bd10      	pop	{r4, pc}

000b40d2 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d2:	b40e      	push	{r1, r2, r3}
   b40d4:	b503      	push	{r0, r1, lr}
   b40d6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40d8:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40da:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40de:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40e0:	f001 faf9 	bl	b56d6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40e4:	b002      	add	sp, #8
   b40e6:	f85d eb04 	ldr.w	lr, [sp], #4
   b40ea:	b003      	add	sp, #12
   b40ec:	4770      	bx	lr
	...

000b40f0 <setup>:

int buttonpress;

Adafruit_SSD1306 display(OLED_RESET);

void setup() {
   b40f0:	b508      	push	{r3, lr}
  Serial.begin(9600);
   b40f2:	f001 fe35 	bl	b5d60 <_Z16_fetch_usbserialv>
   b40f6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40fa:	f001 fe25 	bl	b5d48 <_ZN9USBSerial5beginEl>

  Time.zone(-7);
   b40fe:	eeb9 0a0c 	vmov.f32	s0, #156	; 0xc0e00000 -7.0
   b4102:	f001 fcbd 	bl	b5a80 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4106:	f000 ffdd 	bl	b50c4 <spark_cloud_flag_connected>
        if (!connected()) {
   b410a:	b110      	cbz	r0, b4112 <setup+0x22>
        return spark_sync_time(NULL);
   b410c:	2000      	movs	r0, #0
   b410e:	f000 ffe1 	bl	b50d4 <spark_sync_time>
  Particle.syncTime();

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4112:	223c      	movs	r2, #60	; 0x3c
   b4114:	2102      	movs	r1, #2
   b4116:	480f      	ldr	r0, [pc, #60]	; (b4154 <setup+0x64>)
   b4118:	f000 fd30 	bl	b4b7c <_ZN16Adafruit_SSD13065beginEhh>
  display.display();
   b411c:	480d      	ldr	r0, [pc, #52]	; (b4154 <setup+0x64>)
   b411e:	f000 fcbd 	bl	b4a9c <_ZN16Adafruit_SSD13067displayEv>
  delay(2000); // Pause for 2 seconds
   b4122:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4126:	f001 f88d 	bl	b5244 <delay>
  display.clearDisplay();
   b412a:	480a      	ldr	r0, [pc, #40]	; (b4154 <setup+0x64>)
   b412c:	f000 fc3e 	bl	b49ac <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.drawPixel(10, 10, WHITE);
   b4130:	220a      	movs	r2, #10
   b4132:	2301      	movs	r3, #1
   b4134:	4611      	mov	r1, r2
   b4136:	4807      	ldr	r0, [pc, #28]	; (b4154 <setup+0x64>)
   b4138:	f000 fbdc 	bl	b48f4 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.display();
   b413c:	4805      	ldr	r0, [pc, #20]	; (b4154 <setup+0x64>)
   b413e:	f000 fcad 	bl	b4a9c <_ZN16Adafruit_SSD13067displayEv>
  //delay(2000);
  display.clearDisplay();
   b4142:	4804      	ldr	r0, [pc, #16]	; (b4154 <setup+0x64>)
   b4144:	f000 fc32 	bl	b49ac <_ZN16Adafruit_SSD130612clearDisplayEv>

pinMode(BUTTONPIN,INPUT);
}
   b4148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
pinMode(BUTTONPIN,INPUT);
   b414c:	2100      	movs	r1, #0
   b414e:	2002      	movs	r0, #2
   b4150:	f001 bf48 	b.w	b5fe4 <pinMode>
   b4154:	2003e614 	.word	0x2003e614

000b4158 <loop>:


void loop() {
   b4158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b415a:	f001 fd0a 	bl	b5b72 <_ZN9TimeClass3nowEv>
   b415e:	4602      	mov	r2, r0
   b4160:	17c3      	asrs	r3, r0, #31
   b4162:	4668      	mov	r0, sp
   b4164:	f001 fcac 	bl	b5ac0 <_ZN9TimeClass7timeStrEx>
  DateTime = Time.timeStr();
   b4168:	4669      	mov	r1, sp
   b416a:	481f      	ldr	r0, [pc, #124]	; (b41e8 <loop+0x90>)
  TimeOnly = DateTime.substring(11,19);
   b416c:	4c1f      	ldr	r4, [pc, #124]	; (b41ec <loop+0x94>)
  DateTime = Time.timeStr();
   b416e:	f001 fc33 	bl	b59d8 <_ZN6StringaSEOS_>
   b4172:	4668      	mov	r0, sp
   b4174:	f001 fbb4 	bl	b58e0 <_ZN6StringD1Ev>
  TimeOnly = DateTime.substring(11,19);
   b4178:	2313      	movs	r3, #19
   b417a:	220b      	movs	r2, #11
   b417c:	491a      	ldr	r1, [pc, #104]	; (b41e8 <loop+0x90>)
   b417e:	4668      	mov	r0, sp
   b4180:	f001 fc32 	bl	b59e8 <_ZNK6String9substringEjj>
   b4184:	4669      	mov	r1, sp
   b4186:	4620      	mov	r0, r4
   b4188:	f001 fc26 	bl	b59d8 <_ZN6StringaSEOS_>
   b418c:	4668      	mov	r0, sp
   b418e:	f001 fba7 	bl	b58e0 <_ZN6StringD1Ev>
  display.printf("Time is %s\n",TimeOnly.c_str());
   b4192:	6822      	ldr	r2, [r4, #0]
   b4194:	4916      	ldr	r1, [pc, #88]	; (b41f0 <loop+0x98>)
   b4196:	4817      	ldr	r0, [pc, #92]	; (b41f4 <loop+0x9c>)
   b4198:	f7ff ff9b 	bl	b40d2 <_ZN5Print6printfEPKcz>
  display.setTextSize(1);             // Normal 1:1 pixel scale
   b419c:	4815      	ldr	r0, [pc, #84]	; (b41f4 <loop+0x9c>)
   b419e:	2101      	movs	r1, #1
   b41a0:	f000 fa23 	bl	b45ea <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);        // Draw white text
   b41a4:	4813      	ldr	r0, [pc, #76]	; (b41f4 <loop+0x9c>)
   b41a6:	2101      	movs	r1, #1
   b41a8:	f000 fa24 	bl	b45f4 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,0);             // Start at top-left corner
   b41ac:	2200      	movs	r2, #0
   b41ae:	4611      	mov	r1, r2
   b41b0:	4810      	ldr	r0, [pc, #64]	; (b41f4 <loop+0x9c>)
   b41b2:	f000 fa17 	bl	b45e4 <_ZN12Adafruit_GFX9setCursorEss>
  display.setTextColor(BLACK,WHITE); // Draw 'inverse' text
   b41b6:	2201      	movs	r2, #1
   b41b8:	2100      	movs	r1, #0
   b41ba:	480e      	ldr	r0, [pc, #56]	; (b41f4 <loop+0x9c>)
   b41bc:	f000 fa1d 	bl	b45fa <_ZN12Adafruit_GFX12setTextColorEtt>
  display.display();
   b41c0:	480c      	ldr	r0, [pc, #48]	; (b41f4 <loop+0x9c>)
   b41c2:	f000 fc6b 	bl	b4a9c <_ZN16Adafruit_SSD13067displayEv>
  //delay(2000);

  buttonpress=digitalRead(BUTTONPIN);
   b41c6:	2002      	movs	r0, #2
   b41c8:	f001 ff36 	bl	b6038 <digitalRead>
   b41cc:	4b0a      	ldr	r3, [pc, #40]	; (b41f8 <loop+0xa0>)
   b41ce:	6018      	str	r0, [r3, #0]
  if (buttonpress) {
   b41d0:	b138      	cbz	r0, b41e2 <loop+0x8a>
   Serial.println("Button is pressed");
   b41d2:	f001 fdc5 	bl	b5d60 <_Z16_fetch_usbserialv>
   b41d6:	4909      	ldr	r1, [pc, #36]	; (b41fc <loop+0xa4>)
  }
   b41d8:	b004      	add	sp, #16
   b41da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   Serial.println("Button is pressed");
   b41de:	f001 ba52 	b.w	b5686 <_ZN5Print7printlnEPKc>
   b41e2:	b004      	add	sp, #16
   b41e4:	bd10      	pop	{r4, pc}
   b41e6:	bf00      	nop
   b41e8:	2003e5e4 	.word	0x2003e5e4
   b41ec:	2003e600 	.word	0x2003e600
   b41f0:	000b6a9c 	.word	0x000b6a9c
   b41f4:	2003e614 	.word	0x2003e614
   b41f8:	2003e610 	.word	0x2003e610
   b41fc:	000b6aa8 	.word	0x000b6aa8

000b4200 <_ZN16Adafruit_SSD1306D0Ev>:
   b4200:	b510      	push	{r4, lr}
   b4202:	2124      	movs	r1, #36	; 0x24
   b4204:	4604      	mov	r4, r0
   b4206:	f001 ff90 	bl	b612a <_ZdlPvj>
   b420a:	4620      	mov	r0, r4
   b420c:	bd10      	pop	{r4, pc}
	...

000b4210 <_GLOBAL__sub_I_SystemMode>:
   b4210:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4212:	4c18      	ldr	r4, [pc, #96]	; (b4274 <_GLOBAL__sub_I_SystemMode+0x64>)
String DateTime, TimeOnly;
   b4214:	4e18      	ldr	r6, [pc, #96]	; (b4278 <_GLOBAL__sub_I_SystemMode+0x68>)
   b4216:	4d19      	ldr	r5, [pc, #100]	; (b427c <_GLOBAL__sub_I_SystemMode+0x6c>)
   b4218:	2300      	movs	r3, #0
   b421a:	e9c4 3300 	strd	r3, r3, [r4]
    SleepResult() {}
   b421e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   b4222:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4224:	2002      	movs	r0, #2
   b4226:	f000 ff19 	bl	b505c <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC)
   b422a:	4620      	mov	r0, r4
String DateTime, TimeOnly;
   b422c:	4c14      	ldr	r4, [pc, #80]	; (b4280 <_GLOBAL__sub_I_SystemMode+0x70>)
SYSTEM_MODE(SEMI_AUTOMATIC)
   b422e:	4a15      	ldr	r2, [pc, #84]	; (b4284 <_GLOBAL__sub_I_SystemMode+0x74>)
   b4230:	4915      	ldr	r1, [pc, #84]	; (b4288 <_GLOBAL__sub_I_SystemMode+0x78>)
   b4232:	f001 ff75 	bl	b6120 <__aeabi_atexit>
String DateTime, TimeOnly;
   b4236:	4631      	mov	r1, r6
   b4238:	4620      	mov	r0, r4
   b423a:	f001 fb9c 	bl	b5976 <_ZN6StringC1EPK19__FlashStringHelper>
   b423e:	4620      	mov	r0, r4
   b4240:	4c12      	ldr	r4, [pc, #72]	; (b428c <_GLOBAL__sub_I_SystemMode+0x7c>)
   b4242:	4a10      	ldr	r2, [pc, #64]	; (b4284 <_GLOBAL__sub_I_SystemMode+0x74>)
   b4244:	4629      	mov	r1, r5
   b4246:	f001 ff6b 	bl	b6120 <__aeabi_atexit>
   b424a:	4631      	mov	r1, r6
   b424c:	4620      	mov	r0, r4
   b424e:	f001 fb92 	bl	b5976 <_ZN6StringC1EPK19__FlashStringHelper>
   b4252:	4620      	mov	r0, r4
Adafruit_SSD1306 display(OLED_RESET);
   b4254:	4c0e      	ldr	r4, [pc, #56]	; (b4290 <_GLOBAL__sub_I_SystemMode+0x80>)
String DateTime, TimeOnly;
   b4256:	4a0b      	ldr	r2, [pc, #44]	; (b4284 <_GLOBAL__sub_I_SystemMode+0x74>)
   b4258:	4629      	mov	r1, r5
   b425a:	f001 ff61 	bl	b6120 <__aeabi_atexit>
Adafruit_SSD1306 display(OLED_RESET);
   b425e:	2104      	movs	r1, #4
   b4260:	4620      	mov	r0, r4
   b4262:	f000 fb8d 	bl	b4980 <_ZN16Adafruit_SSD1306C1Ea>
   b4266:	4620      	mov	r0, r4
   b4268:	4a06      	ldr	r2, [pc, #24]	; (b4284 <_GLOBAL__sub_I_SystemMode+0x74>)
   b426a:	490a      	ldr	r1, [pc, #40]	; (b4294 <_GLOBAL__sub_I_SystemMode+0x84>)
   b426c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
Adafruit_SSD1306 display(OLED_RESET);
   b4270:	f001 bf56 	b.w	b6120 <__aeabi_atexit>
   b4274:	2003e5f4 	.word	0x2003e5f4
   b4278:	000b71c0 	.word	0x000b71c0
   b427c:	000b58e1 	.word	0x000b58e1
   b4280:	2003e5e4 	.word	0x2003e5e4
   b4284:	2003e5e0 	.word	0x2003e5e0
   b4288:	000b40c3 	.word	0x000b40c3
   b428c:	2003e600 	.word	0x2003e600
   b4290:	2003e614 	.word	0x2003e614
   b4294:	000b40c1 	.word	0x000b40c1

000b4298 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b4298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b429c:	b085      	sub	sp, #20
   b429e:	461f      	mov	r7, r3
   b42a0:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b42a4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b42a8:	eba8 0902 	sub.w	r9, r8, r2
   b42ac:	eba7 0a01 	sub.w	sl, r7, r1
   b42b0:	f1b9 0f00 	cmp.w	r9, #0
   b42b4:	bfb8      	it	lt
   b42b6:	f1c9 0900 	rsblt	r9, r9, #0
   b42ba:	f1ba 0f00 	cmp.w	sl, #0
   b42be:	bfb8      	it	lt
   b42c0:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b42c4:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b42c6:	4683      	mov	fp, r0
   b42c8:	460c      	mov	r4, r1
   b42ca:	4615      	mov	r5, r2
  if (steep) {
   b42cc:	dd04      	ble.n	b42d8 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b42ce:	463a      	mov	r2, r7
    swap(x0, y0);
   b42d0:	462c      	mov	r4, r5
    swap(x1, y1);
   b42d2:	4647      	mov	r7, r8
    swap(x0, y0);
   b42d4:	460d      	mov	r5, r1
    swap(x1, y1);
   b42d6:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b42d8:	42bc      	cmp	r4, r7
   b42da:	dd05      	ble.n	b42e8 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b42dc:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b42de:	4645      	mov	r5, r8
   b42e0:	4690      	mov	r8, r2
  if (x0 > x1) {
   b42e2:	4622      	mov	r2, r4
   b42e4:	463c      	mov	r4, r7
   b42e6:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b42e8:	1b3e      	subs	r6, r7, r4
   b42ea:	b2b2      	uxth	r2, r6
   b42ec:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b42ee:	eba8 0205 	sub.w	r2, r8, r5
   b42f2:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b42f6:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b42fa:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b42fe:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b4302:	4545      	cmp	r5, r8
   b4304:	bfb4      	ite	lt
   b4306:	2201      	movlt	r2, #1
   b4308:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   b430c:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b430e:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b4310:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b4312:	42bc      	cmp	r4, r7
   b4314:	dc1c      	bgt.n	b4350 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b4316:	f8db 2000 	ldr.w	r2, [fp]
   b431a:	9303      	str	r3, [sp, #12]
    if (steep) {
   b431c:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b431e:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b4322:	bfc7      	ittee	gt
   b4324:	4629      	movgt	r1, r5
   b4326:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b4328:	462a      	movle	r2, r5
   b432a:	4621      	movle	r1, r4
   b432c:	4658      	mov	r0, fp
   b432e:	47c0      	blx	r8
    }
    err -= dy;
   b4330:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b4332:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b4334:	1ab6      	subs	r6, r6, r2
   b4336:	b2b1      	uxth	r1, r6
   b4338:	b236      	sxth	r6, r6
    if (err < 0) {
   b433a:	2e00      	cmp	r6, #0
   b433c:	da05      	bge.n	b434a <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b433e:	9a02      	ldr	r2, [sp, #8]
   b4340:	4415      	add	r5, r2
      err += dx;
   b4342:	9a00      	ldr	r2, [sp, #0]
   b4344:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b4346:	b22d      	sxth	r5, r5
      err += dx;
   b4348:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b434a:	3401      	adds	r4, #1
   b434c:	b224      	sxth	r4, r4
   b434e:	e7e0      	b.n	b4312 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b4350:	b005      	add	sp, #20
   b4352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4356 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b4356:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b435a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b435e:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b4360:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b4364:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b4368:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b436a:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b436c:	4616      	mov	r6, r2
   b436e:	468a      	mov	sl, r1
   b4370:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b4372:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b4374:	6823      	ldr	r3, [r4, #0]
   b4376:	f8cd 8000 	str.w	r8, [sp]
   b437a:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b437e:	4432      	add	r2, r6
   b4380:	69df      	ldr	r7, [r3, #28]
   b4382:	4651      	mov	r1, sl
   b4384:	462b      	mov	r3, r5
   b4386:	4620      	mov	r0, r4
   b4388:	b212      	sxth	r2, r2
   b438a:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b438c:	6823      	ldr	r3, [r4, #0]
   b438e:	f8cd 8000 	str.w	r8, [sp]
   b4392:	699f      	ldr	r7, [r3, #24]
   b4394:	4632      	mov	r2, r6
   b4396:	464b      	mov	r3, r9
   b4398:	4651      	mov	r1, sl
   b439a:	4620      	mov	r0, r4
   b439c:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b439e:	1e6b      	subs	r3, r5, #1
   b43a0:	eb03 010a 	add.w	r1, r3, sl
   b43a4:	6823      	ldr	r3, [r4, #0]
   b43a6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b43aa:	699d      	ldr	r5, [r3, #24]
   b43ac:	4632      	mov	r2, r6
   b43ae:	464b      	mov	r3, r9
   b43b0:	b209      	sxth	r1, r1
   b43b2:	4620      	mov	r0, r4
   b43b4:	46ac      	mov	ip, r5
}
   b43b6:	b002      	add	sp, #8
   b43b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b43bc:	4760      	bx	ip

000b43be <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b43be:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b43c0:	3b01      	subs	r3, #1
   b43c2:	4413      	add	r3, r2
   b43c4:	6804      	ldr	r4, [r0, #0]
   b43c6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b43ca:	9501      	str	r5, [sp, #4]
   b43cc:	b21b      	sxth	r3, r3
   b43ce:	9300      	str	r3, [sp, #0]
   b43d0:	6964      	ldr	r4, [r4, #20]
   b43d2:	460b      	mov	r3, r1
   b43d4:	47a0      	blx	r4
}
   b43d6:	b003      	add	sp, #12
   b43d8:	bd30      	pop	{r4, r5, pc}

000b43da <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b43da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b43dc:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b43e0:	6804      	ldr	r4, [r0, #0]
   b43e2:	e9cd 2500 	strd	r2, r5, [sp]
   b43e6:	3b01      	subs	r3, #1
   b43e8:	440b      	add	r3, r1
   b43ea:	6964      	ldr	r4, [r4, #20]
   b43ec:	b21b      	sxth	r3, r3
   b43ee:	47a0      	blx	r4
}
   b43f0:	b003      	add	sp, #12
   b43f2:	bd30      	pop	{r4, r5, pc}

000b43f4 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b43f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b43f8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b43fc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4400:	4605      	mov	r5, r0
   b4402:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b4404:	460c      	mov	r4, r1
   b4406:	18ce      	adds	r6, r1, r3
   b4408:	42b4      	cmp	r4, r6
   b440a:	da0b      	bge.n	b4424 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b440c:	682b      	ldr	r3, [r5, #0]
   b440e:	f8cd 8000 	str.w	r8, [sp]
   b4412:	699f      	ldr	r7, [r3, #24]
   b4414:	4621      	mov	r1, r4
   b4416:	464b      	mov	r3, r9
   b4418:	4652      	mov	r2, sl
   b441a:	4628      	mov	r0, r5
   b441c:	3401      	adds	r4, #1
   b441e:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b4420:	b224      	sxth	r4, r4
   b4422:	e7f1      	b.n	b4408 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b4424:	b002      	add	sp, #8
   b4426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b442a <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b442a:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b442c:	6802      	ldr	r2, [r0, #0]
   b442e:	9101      	str	r1, [sp, #4]
   b4430:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4434:	9100      	str	r1, [sp, #0]
   b4436:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b4438:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b443c:	2200      	movs	r2, #0
   b443e:	4611      	mov	r1, r2
   b4440:	47a0      	blx	r4
}
   b4442:	b002      	add	sp, #8
   b4444:	bd10      	pop	{r4, pc}

000b4446 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b4446:	4770      	bx	lr

000b4448 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4448:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b444a:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b444c:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b444e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    Print() : write_error(0) {}
   b4452:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b4454:	4d05      	ldr	r5, [pc, #20]	; (b446c <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b4456:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b4458:	2201      	movs	r2, #1
   b445a:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b445c:	6005      	str	r5, [r0, #0]
   b445e:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b4460:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b4462:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b4464:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b4466:	7682      	strb	r2, [r0, #26]
}
   b4468:	bd30      	pop	{r4, r5, pc}
   b446a:	bf00      	nop
   b446c:	000b6fc0 	.word	0x000b6fc0

000b4470 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b4470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4474:	ed2d 8b02 	vpush	{d8}
   b4478:	b08d      	sub	sp, #52	; 0x34
   b447a:	4607      	mov	r7, r0
   b447c:	9104      	str	r1, [sp, #16]
   b447e:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b4482:	9105      	str	r1, [sp, #20]
   b4484:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b4488:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b448a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b448e:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b4490:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b4494:	4281      	cmp	r1, r0
   b4496:	dd52      	ble.n	b453e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b4498:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b449c:	4291      	cmp	r1, r2
   b449e:	dd4e      	ble.n	b453e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b44a0:	2106      	movs	r1, #6
   b44a2:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b44a6:	2c00      	cmp	r4, #0
   b44a8:	dd49      	ble.n	b453e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b44aa:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b44ae:	2c00      	cmp	r4, #0
   b44b0:	dd45      	ble.n	b453e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b44b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b44b6:	930b      	str	r3, [sp, #44]	; 0x2c
   b44b8:	b293      	uxth	r3, r2
   b44ba:	9307      	str	r3, [sp, #28]
   b44bc:	3308      	adds	r3, #8
   b44be:	b29b      	uxth	r3, r3
   b44c0:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b44c2:	2400      	movs	r4, #0
   b44c4:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b44c6:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b44c8:	bf1c      	itt	ne
   b44ca:	4b2c      	ldrne	r3, [pc, #176]	; (b457c <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b44cc:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b44ce:	9e07      	ldr	r6, [sp, #28]
   b44d0:	bf16      	itet	ne
   b44d2:	191b      	addne	r3, r3, r4
      line = 0x0;
   b44d4:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b44d6:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b44d8:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b44da:	9a04      	ldr	r2, [sp, #16]
   b44dc:	b2ab      	uxth	r3, r5
   b44de:	930a      	str	r3, [sp, #40]	; 0x28
   b44e0:	fb04 f305 	mul.w	r3, r4, r5
   b44e4:	fa13 f382 	uxtah	r3, r3, r2
   b44e8:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b44ea:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b44ee:	ee08 3a10 	vmov	s16, r3
   b44f2:	46b0      	mov	r8, r6
   b44f4:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b44f8:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b44fc:	9b03      	ldr	r3, [sp, #12]
   b44fe:	07db      	lsls	r3, r3, #31
   b4500:	d52f      	bpl.n	b4562 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b4502:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b4504:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b4506:	d11f      	bne.n	b4548 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b4508:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b450c:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b450e:	b232      	sxth	r2, r6
   b4510:	4651      	mov	r1, sl
   b4512:	4638      	mov	r0, r7
   b4514:	47d8      	blx	fp
      line >>= 1;
   b4516:	9b03      	ldr	r3, [sp, #12]
   b4518:	085b      	lsrs	r3, r3, #1
   b451a:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b451c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b451e:	3601      	adds	r6, #1
   b4520:	4498      	add	r8, r3
   b4522:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4524:	b2b6      	uxth	r6, r6
   b4526:	42b3      	cmp	r3, r6
   b4528:	fa1f f888 	uxth.w	r8, r8
   b452c:	d1e6      	bne.n	b44fc <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b452e:	9b08      	ldr	r3, [sp, #32]
   b4530:	3b01      	subs	r3, #1
   b4532:	3401      	adds	r4, #1
   b4534:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4538:	b264      	sxtb	r4, r4
   b453a:	9308      	str	r3, [sp, #32]
   b453c:	d1c3      	bne.n	b44c6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b453e:	b00d      	add	sp, #52	; 0x34
   b4540:	ecbd 8b02 	vpop	{d8}
   b4544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b4548:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b454a:	e9cd 9200 	strd	r9, r2, [sp]
   b454e:	ee18 1a10 	vmov	r1, s16
   b4552:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b4556:	fa0f f288 	sxth.w	r2, r8
   b455a:	464b      	mov	r3, r9
   b455c:	4638      	mov	r0, r7
   b455e:	47d8      	blx	fp
   b4560:	e7d9      	b.n	b4516 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b4562:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b4566:	4293      	cmp	r3, r2
   b4568:	d0d5      	beq.n	b4516 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b456a:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b456c:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b456e:	d103      	bne.n	b4578 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b4570:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b4574:	9b06      	ldr	r3, [sp, #24]
   b4576:	e7ca      	b.n	b450e <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4578:	9a06      	ldr	r2, [sp, #24]
   b457a:	e7e6      	b.n	b454a <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b457c:	000b6aba 	.word	0x000b6aba

000b4580 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b4580:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b4582:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b4584:	b085      	sub	sp, #20
   b4586:	4604      	mov	r4, r0
  if (c == '\n') {
   b4588:	d107      	bne.n	b459a <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b458a:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b458c:	8a63      	ldrh	r3, [r4, #18]
   b458e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b4592:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b4594:	2300      	movs	r3, #0
   b4596:	8223      	strh	r3, [r4, #16]
   b4598:	e021      	b.n	b45de <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b459a:	290d      	cmp	r1, #13
   b459c:	d01f      	beq.n	b45de <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b459e:	7e03      	ldrb	r3, [r0, #24]
   b45a0:	9302      	str	r3, [sp, #8]
   b45a2:	8ac3      	ldrh	r3, [r0, #22]
   b45a4:	9301      	str	r3, [sp, #4]
   b45a6:	8a83      	ldrh	r3, [r0, #20]
   b45a8:	9300      	str	r3, [sp, #0]
   b45aa:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b45ae:	460b      	mov	r3, r1
   b45b0:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b45b4:	f7ff ff5c 	bl	b4470 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b45b8:	7e20      	ldrb	r0, [r4, #24]
   b45ba:	8a23      	ldrh	r3, [r4, #16]
   b45bc:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b45c0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b45c4:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b45c6:	b21b      	sxth	r3, r3
   b45c8:	4602      	mov	r2, r0
   b45ca:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b45cc:	b139      	cbz	r1, b45de <_ZN12Adafruit_GFX5writeEh+0x5e>
   b45ce:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b45d2:	f06f 0505 	mvn.w	r5, #5
   b45d6:	fb05 1100 	mla	r1, r5, r0, r1
   b45da:	428b      	cmp	r3, r1
   b45dc:	dcd6      	bgt.n	b458c <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b45de:	2001      	movs	r0, #1
   b45e0:	b005      	add	sp, #20
   b45e2:	bd30      	pop	{r4, r5, pc}

000b45e4 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b45e4:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b45e6:	8242      	strh	r2, [r0, #18]
}
   b45e8:	4770      	bx	lr

000b45ea <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b45ea:	2901      	cmp	r1, #1
   b45ec:	bf38      	it	cc
   b45ee:	2101      	movcc	r1, #1
   b45f0:	7601      	strb	r1, [r0, #24]
}
   b45f2:	4770      	bx	lr

000b45f4 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b45f4:	82c1      	strh	r1, [r0, #22]
   b45f6:	8281      	strh	r1, [r0, #20]
}
   b45f8:	4770      	bx	lr

000b45fa <_ZN12Adafruit_GFX12setTextColorEtt>:
  textcolor   = c;
   b45fa:	8281      	strh	r1, [r0, #20]
  textbgcolor = b; 
   b45fc:	82c2      	strh	r2, [r0, #22]
}
   b45fe:	4770      	bx	lr

000b4600 <_ZN12Adafruit_GFX11getRotationEv>:
}
   b4600:	7e40      	ldrb	r0, [r0, #25]
   b4602:	4770      	bx	lr

000b4604 <_ZN12Adafruit_GFX5widthEv>:
}
   b4604:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b4608:	4770      	bx	lr

000b460a <_ZN12Adafruit_GFX6heightEv>:
}
   b460a:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b460e:	4770      	bx	lr

000b4610 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4610:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b4612:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4614:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4618:	2d02      	cmp	r5, #2
   b461a:	d069      	beq.n	b46f0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b461c:	2d03      	cmp	r5, #3
   b461e:	f000 8099 	beq.w	b4754 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b4622:	2d01      	cmp	r5, #1
   b4624:	d16c      	bne.n	b4700 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b4626:	8905      	ldrh	r5, [r0, #8]
   b4628:	43d2      	mvns	r2, r2
   b462a:	442a      	add	r2, r5
   b462c:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b462e:	2a00      	cmp	r2, #0
   b4630:	db5d      	blt.n	b46ee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4632:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4636:	4295      	cmp	r5, r2
   b4638:	dd59      	ble.n	b46ee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b463a:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b463c:	bfbe      	ittt	lt
   b463e:	185b      	addlt	r3, r3, r1
   b4640:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4642:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b4644:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4648:	18cd      	adds	r5, r1, r3
   b464a:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b464c:	bfc4      	itt	gt
   b464e:	1a43      	subgt	r3, r0, r1
   b4650:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b4652:	2b00      	cmp	r3, #0
   b4654:	dd4b      	ble.n	b46ee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b4656:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b465a:	f8df c120 	ldr.w	ip, [pc, #288]	; b477c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b465e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b4662:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b4666:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4668:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b466c:	d01a      	beq.n	b46a4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b466e:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b4672:	4e40      	ldr	r6, [pc, #256]	; (b4774 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b4674:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b4676:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4678:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b467a:	bf3f      	itttt	cc
   b467c:	eba5 0e03 	subcc.w	lr, r5, r3
   b4680:	26ff      	movcc	r6, #255	; 0xff
   b4682:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4686:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b4688:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b468c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b468e:	bf0c      	ite	eq
   b4690:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b4692:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b4694:	42ab      	cmp	r3, r5
   b4696:	f80c 6002 	strb.w	r6, [ip, r2]
   b469a:	d328      	bcc.n	b46ee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b469c:	3908      	subs	r1, #8
   b469e:	440b      	add	r3, r1
   b46a0:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b46a2:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b46a4:	2b07      	cmp	r3, #7
   b46a6:	d919      	bls.n	b46dc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b46a8:	2c01      	cmp	r4, #1
   b46aa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b46ae:	bf18      	it	ne
   b46b0:	2500      	movne	r5, #0
   b46b2:	b2ed      	uxtb	r5, r5
   b46b4:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b46b8:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b46ba:	3a08      	subs	r2, #8
   b46bc:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b46be:	2a07      	cmp	r2, #7
      *pBuf = val;
   b46c0:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b46c4:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b46c8:	d8f7      	bhi.n	b46ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b46ca:	f1a3 0208 	sub.w	r2, r3, #8
   b46ce:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b46d2:	3201      	adds	r2, #1
   b46d4:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b46d8:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b46dc:	b13b      	cbz	r3, b46ee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b46de:	4a26      	ldr	r2, [pc, #152]	; (b4778 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b46e0:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b46e2:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b46e4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b46e6:	bf0c      	ite	eq
   b46e8:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b46ea:	4393      	bicne	r3, r2
   b46ec:	7003      	strb	r3, [r0, #0]
}
   b46ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b46f0:	8945      	ldrh	r5, [r0, #10]
   b46f2:	43d2      	mvns	r2, r2
   b46f4:	442a      	add	r2, r5
      x -= (w-1);
   b46f6:	18cd      	adds	r5, r1, r3
   b46f8:	8901      	ldrh	r1, [r0, #8]
   b46fa:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b46fc:	b212      	sxth	r2, r2
      x -= (w-1);
   b46fe:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b4700:	2a00      	cmp	r2, #0
   b4702:	dbf4      	blt.n	b46ee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4704:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4708:	4295      	cmp	r5, r2
   b470a:	ddf0      	ble.n	b46ee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b470c:	2900      	cmp	r1, #0
    w += x;
   b470e:	bfbe      	ittt	lt
   b4710:	185b      	addlt	r3, r3, r1
   b4712:	b21b      	sxthlt	r3, r3
    x = 0;
   b4714:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b4716:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b471a:	18ce      	adds	r6, r1, r3
   b471c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b471e:	bfc4      	itt	gt
   b4720:	1a6b      	subgt	r3, r5, r1
   b4722:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4724:	2b00      	cmp	r3, #0
   b4726:	dde2      	ble.n	b46ee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4728:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b472a:	2580      	movs	r5, #128	; 0x80
   b472c:	fb10 1105 	smlabb	r1, r0, r5, r1
   b4730:	4812      	ldr	r0, [pc, #72]	; (b477c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b4732:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b4734:	f002 0007 	and.w	r0, r2, #7
   b4738:	2201      	movs	r2, #1
   b473a:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b473c:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b473e:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b4740:	440b      	add	r3, r1
   b4742:	d10c      	bne.n	b475e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b4744:	428b      	cmp	r3, r1
   b4746:	d0d2      	beq.n	b46ee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4748:	f811 0b01 	ldrb.w	r0, [r1], #1
   b474c:	4310      	orrs	r0, r2
   b474e:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4752:	e7f7      	b.n	b4744 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b4754:	18cd      	adds	r5, r1, r3
   b4756:	8941      	ldrh	r1, [r0, #10]
   b4758:	1b49      	subs	r1, r1, r5
   b475a:	b209      	sxth	r1, r1
      break;
   b475c:	e767      	b.n	b462e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b475e:	43d2      	mvns	r2, r2
   b4760:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b4762:	428b      	cmp	r3, r1
   b4764:	d0c3      	beq.n	b46ee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4766:	f811 0b01 	ldrb.w	r0, [r1], #1
   b476a:	4010      	ands	r0, r2
   b476c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4770:	e7f7      	b.n	b4762 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b4772:	bf00      	nop
   b4774:	2003e16c 	.word	0x2003e16c
   b4778:	2003e164 	.word	0x2003e164
   b477c:	2003e174 	.word	0x2003e174

000b4780 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4780:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b4782:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4784:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4788:	2d02      	cmp	r5, #2
   b478a:	d034      	beq.n	b47f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b478c:	2d03      	cmp	r5, #3
   b478e:	f000 809b 	beq.w	b48c8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b4792:	2d01      	cmp	r5, #1
   b4794:	d137      	bne.n	b4806 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b4796:	18d5      	adds	r5, r2, r3
   b4798:	8902      	ldrh	r2, [r0, #8]
   b479a:	1b52      	subs	r2, r2, r5
   b479c:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b479e:	2900      	cmp	r1, #0
   b47a0:	f2c0 8091 	blt.w	b48c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b47a4:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b47a8:	428d      	cmp	r5, r1
   b47aa:	f340 808c 	ble.w	b48c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b47ae:	2a00      	cmp	r2, #0
    w += x;
   b47b0:	bfbe      	ittt	lt
   b47b2:	189b      	addlt	r3, r3, r2
   b47b4:	b21b      	sxthlt	r3, r3
    x = 0;
   b47b6:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b47b8:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b47bc:	18d6      	adds	r6, r2, r3
   b47be:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b47c0:	bfc4      	itt	gt
   b47c2:	1aab      	subgt	r3, r5, r2
   b47c4:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b47c6:	2b00      	cmp	r3, #0
   b47c8:	dd7d      	ble.n	b48c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b47ca:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b47cc:	2580      	movs	r5, #128	; 0x80
   b47ce:	fb10 2205 	smlabb	r2, r0, r5, r2
   b47d2:	4845      	ldr	r0, [pc, #276]	; (b48e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b47d4:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b47d6:	f001 0007 	and.w	r0, r1, #7
   b47da:	2101      	movs	r1, #1
   b47dc:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b47de:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b47e0:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b47e2:	4413      	add	r3, r2
   b47e4:	d175      	bne.n	b48d2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b47e6:	429a      	cmp	r2, r3
   b47e8:	d06d      	beq.n	b48c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b47ea:	f812 0b01 	ldrb.w	r0, [r2], #1
   b47ee:	4308      	orrs	r0, r1
   b47f0:	f802 0c01 	strb.w	r0, [r2, #-1]
   b47f4:	e7f7      	b.n	b47e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b47f6:	8905      	ldrh	r5, [r0, #8]
   b47f8:	43c9      	mvns	r1, r1
   b47fa:	4429      	add	r1, r5
      y -= (h-1);
   b47fc:	18d5      	adds	r5, r2, r3
   b47fe:	8942      	ldrh	r2, [r0, #10]
   b4800:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b4802:	b209      	sxth	r1, r1
      y -= (h-1);
   b4804:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b4806:	2900      	cmp	r1, #0
   b4808:	db5d      	blt.n	b48c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b480a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b480e:	428d      	cmp	r5, r1
   b4810:	dd59      	ble.n	b48c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b4812:	2a00      	cmp	r2, #0
    __h += __y;
   b4814:	bfbe      	ittt	lt
   b4816:	189b      	addlt	r3, r3, r2
   b4818:	b21b      	sxthlt	r3, r3
    __y = 0;
   b481a:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b481c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4820:	18d5      	adds	r5, r2, r3
   b4822:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4824:	bfc4      	itt	gt
   b4826:	1a83      	subgt	r3, r0, r2
   b4828:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b482a:	2b00      	cmp	r3, #0
   b482c:	dd4b      	ble.n	b48c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b482e:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b4832:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b48e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b4836:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b483a:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b483e:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4840:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b4844:	d01a      	beq.n	b487c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b4846:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b484a:	4e28      	ldr	r6, [pc, #160]	; (b48ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b484c:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b484e:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4850:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4852:	bf3f      	itttt	cc
   b4854:	eba5 0e03 	subcc.w	lr, r5, r3
   b4858:	26ff      	movcc	r6, #255	; 0xff
   b485a:	fa46 f60e 	asrcc.w	r6, r6, lr
   b485e:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b4860:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b4864:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4866:	bf0c      	ite	eq
   b4868:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b486a:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b486c:	42ab      	cmp	r3, r5
   b486e:	f80c 6001 	strb.w	r6, [ip, r1]
   b4872:	d328      	bcc.n	b48c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b4874:	3a08      	subs	r2, #8
   b4876:	4413      	add	r3, r2
   b4878:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b487a:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b487c:	2b07      	cmp	r3, #7
   b487e:	d919      	bls.n	b48b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4880:	2c01      	cmp	r4, #1
   b4882:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b4886:	bf18      	it	ne
   b4888:	2500      	movne	r5, #0
   b488a:	b2ed      	uxtb	r5, r5
   b488c:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4890:	461a      	mov	r2, r3
      h -= 8;
   b4892:	3a08      	subs	r2, #8
   b4894:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4896:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4898:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b489c:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b48a0:	d8f7      	bhi.n	b4892 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b48a2:	f1a3 0208 	sub.w	r2, r3, #8
   b48a6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b48aa:	3201      	adds	r2, #1
   b48ac:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b48b0:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b48b4:	b13b      	cbz	r3, b48c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b48b6:	4a0e      	ldr	r2, [pc, #56]	; (b48f0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b48b8:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b48ba:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b48bc:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b48be:	bf0c      	ite	eq
   b48c0:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b48c2:	4393      	bicne	r3, r2
   b48c4:	7003      	strb	r3, [r0, #0]
}
   b48c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b48c8:	8945      	ldrh	r5, [r0, #10]
   b48ca:	43c9      	mvns	r1, r1
   b48cc:	4429      	add	r1, r5
   b48ce:	b209      	sxth	r1, r1
      break;
   b48d0:	e765      	b.n	b479e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b48d2:	43c9      	mvns	r1, r1
   b48d4:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b48d6:	429a      	cmp	r2, r3
   b48d8:	d0f5      	beq.n	b48c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b48da:	f812 0b01 	ldrb.w	r0, [r2], #1
   b48de:	4008      	ands	r0, r1
   b48e0:	f802 0c01 	strb.w	r0, [r2, #-1]
   b48e4:	e7f7      	b.n	b48d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b48e6:	bf00      	nop
   b48e8:	2003e174 	.word	0x2003e174
   b48ec:	2003e16c 	.word	0x2003e16c
   b48f0:	2003e164 	.word	0x2003e164

000b48f4 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b48f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b48f6:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b48f8:	4606      	mov	r6, r0
   b48fa:	4614      	mov	r4, r2
   b48fc:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b48fe:	db2d      	blt.n	b495c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4900:	f7ff fe80 	bl	b4604 <_ZN12Adafruit_GFX5widthEv>
   b4904:	42a8      	cmp	r0, r5
   b4906:	dd29      	ble.n	b495c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4908:	2c00      	cmp	r4, #0
   b490a:	db27      	blt.n	b495c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b490c:	4630      	mov	r0, r6
   b490e:	f7ff fe7c 	bl	b460a <_ZN12Adafruit_GFX6heightEv>
   b4912:	42a0      	cmp	r0, r4
   b4914:	dd22      	ble.n	b495c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b4916:	4630      	mov	r0, r6
   b4918:	f7ff fe72 	bl	b4600 <_ZN12Adafruit_GFX11getRotationEv>
   b491c:	2802      	cmp	r0, #2
   b491e:	d01e      	beq.n	b495e <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b4920:	2803      	cmp	r0, #3
   b4922:	d025      	beq.n	b4970 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b4924:	2801      	cmp	r0, #1
   b4926:	d104      	bne.n	b4932 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b4928:	8933      	ldrh	r3, [r6, #8]
   b492a:	43e2      	mvns	r2, r4
   b492c:	441a      	add	r2, r3
    break;
   b492e:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b4930:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4932:	2c00      	cmp	r4, #0
   b4934:	4622      	mov	r2, r4
   b4936:	bfb8      	it	lt
   b4938:	1de2      	addlt	r2, r4, #7
   b493a:	10d2      	asrs	r2, r2, #3
   b493c:	2180      	movs	r1, #128	; 0x80
   b493e:	fb12 5501 	smlabb	r5, r2, r1, r5
   b4942:	490e      	ldr	r1, [pc, #56]	; (b497c <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b4944:	2201      	movs	r2, #1
   b4946:	f004 0407 	and.w	r4, r4, #7
   b494a:	574b      	ldrsb	r3, [r1, r5]
   b494c:	fa02 f404 	lsl.w	r4, r2, r4
   b4950:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b4952:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4954:	bf0c      	ite	eq
   b4956:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b4958:	43a3      	bicne	r3, r4
   b495a:	554b      	strb	r3, [r1, r5]
}
   b495c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b495e:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b4960:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b4962:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b4964:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b4966:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b4968:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b496a:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b496c:	b224      	sxth	r4, r4
    break;
   b496e:	e7e0      	b.n	b4932 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b4970:	8973      	ldrh	r3, [r6, #10]
   b4972:	3b01      	subs	r3, #1
   b4974:	1b5b      	subs	r3, r3, r5
    break;
   b4976:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b4978:	b21c      	sxth	r4, r3
    break;
   b497a:	e7da      	b.n	b4932 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b497c:	2003e174 	.word	0x2003e174

000b4980 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4980:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4982:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4984:	4604      	mov	r4, r0
   b4986:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4988:	2180      	movs	r1, #128	; 0x80
   b498a:	f7ff fd5d 	bl	b4448 <_ZN12Adafruit_GFXC1Ess>
   b498e:	4b06      	ldr	r3, [pc, #24]	; (b49a8 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b4990:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b4992:	23ff      	movs	r3, #255	; 0xff
   b4994:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b4998:	7763      	strb	r3, [r4, #29]
   b499a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b499e:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b49a0:	f884 5020 	strb.w	r5, [r4, #32]
}
   b49a4:	4620      	mov	r0, r4
   b49a6:	bd38      	pop	{r3, r4, r5, pc}
   b49a8:	000b6ff8 	.word	0x000b6ff8

000b49ac <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b49ac:	4802      	ldr	r0, [pc, #8]	; (b49b8 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b49ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b49b2:	2100      	movs	r1, #0
   b49b4:	f002 b822 	b.w	b69fc <memset>
   b49b8:	2003e174 	.word	0x2003e174

000b49bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b49bc:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b49be:	4c0b      	ldr	r4, [pc, #44]	; (b49ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b49c0:	7821      	ldrb	r1, [r4, #0]
   b49c2:	f3bf 8f5b 	dmb	ish
   b49c6:	f011 0101 	ands.w	r1, r1, #1
   b49ca:	d10b      	bne.n	b49e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b49cc:	4620      	mov	r0, r4
   b49ce:	9101      	str	r1, [sp, #4]
   b49d0:	f7ff fb6e 	bl	b40b0 <__cxa_guard_acquire>
   b49d4:	9901      	ldr	r1, [sp, #4]
   b49d6:	b128      	cbz	r0, b49e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b49d8:	4805      	ldr	r0, [pc, #20]	; (b49f0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b49da:	f000 fec7 	bl	b576c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b49de:	4620      	mov	r0, r4
   b49e0:	f7ff fb6b 	bl	b40ba <__cxa_guard_release>
        return instance;
    }
   b49e4:	4802      	ldr	r0, [pc, #8]	; (b49f0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b49e6:	b002      	add	sp, #8
   b49e8:	bd10      	pop	{r4, pc}
   b49ea:	bf00      	nop
   b49ec:	2003e638 	.word	0x2003e638
   b49f0:	2003e63c 	.word	0x2003e63c

000b49f4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b49f4:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b49f6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b49fa:	b143      	cbz	r3, b4a0e <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b49fc:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b49fe:	f7ff ffdd 	bl	b49bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4a02:	9901      	ldr	r1, [sp, #4]
}
   b4a04:	b003      	add	sp, #12
   b4a06:	f85d eb04 	ldr.w	lr, [sp], #4
   b4a0a:	f000 bf63 	b.w	b58d4 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4a0e:	460b      	mov	r3, r1
   b4a10:	7f81      	ldrb	r1, [r0, #30]
   b4a12:	7f40      	ldrb	r0, [r0, #29]
   b4a14:	2201      	movs	r2, #1
}
   b4a16:	b003      	add	sp, #12
   b4a18:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4a1c:	f001 bb1f 	b.w	b605e <shiftOut>

000b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4a20:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b4a22:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b4a26:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4a28:	4604      	mov	r4, r0
   b4a2a:	460d      	mov	r5, r1
  if (sid != -1)
   b4a2c:	d01d      	beq.n	b4a6a <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b4a2e:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b4a32:	2101      	movs	r1, #1
   b4a34:	b280      	uxth	r0, r0
   b4a36:	f001 fae6 	bl	b6006 <digitalWrite>
    digitalWrite(dc, LOW);
   b4a3a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b4a3e:	2100      	movs	r1, #0
   b4a40:	b280      	uxth	r0, r0
   b4a42:	f001 fae0 	bl	b6006 <digitalWrite>
    digitalWrite(cs, LOW);
   b4a46:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4a4a:	2100      	movs	r1, #0
   b4a4c:	b280      	uxth	r0, r0
   b4a4e:	f001 fada 	bl	b6006 <digitalWrite>
    fastSPIwrite(c);
   b4a52:	4629      	mov	r1, r5
   b4a54:	4620      	mov	r0, r4
   b4a56:	f7ff ffcd 	bl	b49f4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b4a5a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4a5e:	2101      	movs	r1, #1
}
   b4a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b4a64:	b280      	uxth	r0, r0
   b4a66:	f001 bace 	b.w	b6006 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b4a6a:	f001 fb31 	bl	b60d0 <_Z19__fetch_global_Wirev>
   b4a6e:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b4a72:	f000 fc95 	bl	b53a0 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b4a76:	f001 fb2b 	bl	b60d0 <_Z19__fetch_global_Wirev>
   b4a7a:	6803      	ldr	r3, [r0, #0]
   b4a7c:	2100      	movs	r1, #0
   b4a7e:	689b      	ldr	r3, [r3, #8]
   b4a80:	4798      	blx	r3
    Wire.write(c);
   b4a82:	f001 fb25 	bl	b60d0 <_Z19__fetch_global_Wirev>
   b4a86:	6803      	ldr	r3, [r0, #0]
   b4a88:	4629      	mov	r1, r5
   b4a8a:	689b      	ldr	r3, [r3, #8]
   b4a8c:	4798      	blx	r3
    Wire.endTransmission();
   b4a8e:	f001 fb1f 	bl	b60d0 <_Z19__fetch_global_Wirev>
}
   b4a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b4a96:	f000 bc8a 	b.w	b53ae <_ZN7TwoWire15endTransmissionEv>
	...

000b4a9c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b4a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b4a9e:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b4aa0:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b4aa2:	f7ff ffbd 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b4aa6:	2100      	movs	r1, #0
   b4aa8:	4620      	mov	r0, r4
   b4aaa:	f7ff ffb9 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b4aae:	217f      	movs	r1, #127	; 0x7f
   b4ab0:	4620      	mov	r0, r4
   b4ab2:	f7ff ffb5 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b4ab6:	2122      	movs	r1, #34	; 0x22
   b4ab8:	4620      	mov	r0, r4
   b4aba:	f7ff ffb1 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b4abe:	2100      	movs	r1, #0
   b4ac0:	4620      	mov	r0, r4
   b4ac2:	f7ff ffad 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b4ac6:	2107      	movs	r1, #7
   b4ac8:	4620      	mov	r0, r4
   b4aca:	f7ff ffa9 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b4ace:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b4ad2:	4f29      	ldr	r7, [pc, #164]	; (b4b78 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b4ad4:	3301      	adds	r3, #1
   b4ad6:	d02a      	beq.n	b4b2e <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b4ad8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4adc:	2101      	movs	r1, #1
   b4ade:	b280      	uxth	r0, r0
   b4ae0:	f001 fa91 	bl	b6006 <digitalWrite>
    digitalWrite(dc, HIGH);
   b4ae4:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b4ae8:	2101      	movs	r1, #1
   b4aea:	b280      	uxth	r0, r0
   b4aec:	f001 fa8b 	bl	b6006 <digitalWrite>
    digitalWrite(cs, LOW);
   b4af0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4af4:	2100      	movs	r1, #0
   b4af6:	b280      	uxth	r0, r0
   b4af8:	f001 fa85 	bl	b6006 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4afc:	2001      	movs	r0, #1
   b4afe:	f000 f92d 	bl	b4d5c <HAL_Delay_Microseconds>
   b4b02:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4b06:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b4b08:	f817 1b01 	ldrb.w	r1, [r7], #1
   b4b0c:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4b0e:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b4b10:	f7ff ff70 	bl	b49f4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4b14:	2d00      	cmp	r5, #0
   b4b16:	d1f6      	bne.n	b4b06 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b4b18:	2001      	movs	r0, #1
   b4b1a:	f000 f91f 	bl	b4d5c <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b4b1e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4b22:	2101      	movs	r1, #1
}
   b4b24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b4b28:	b280      	uxth	r0, r0
   b4b2a:	f001 ba6c 	b.w	b6006 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4b2e:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b4b30:	f001 face 	bl	b60d0 <_Z19__fetch_global_Wirev>
   b4b34:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b4b38:	f000 fc32 	bl	b53a0 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b4b3c:	f001 fac8 	bl	b60d0 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4b40:	6803      	ldr	r3, [r0, #0]
   b4b42:	2140      	movs	r1, #64	; 0x40
   b4b44:	689b      	ldr	r3, [r3, #8]
   b4b46:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b4b48:	f105 0610 	add.w	r6, r5, #16
   b4b4c:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b4b4e:	f001 fabf 	bl	b60d0 <_Z19__fetch_global_Wirev>
   b4b52:	6803      	ldr	r3, [r0, #0]
   b4b54:	5d79      	ldrb	r1, [r7, r5]
   b4b56:	689b      	ldr	r3, [r3, #8]
   b4b58:	4798      	blx	r3
		i++;
   b4b5a:	1c6b      	adds	r3, r5, #1
   b4b5c:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b4b5e:	42ae      	cmp	r6, r5
   b4b60:	d1f5      	bne.n	b4b4e <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b4b62:	f001 fab5 	bl	b60d0 <_Z19__fetch_global_Wirev>
   b4b66:	f000 fc22 	bl	b53ae <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4b6a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b4b6e:	d100      	bne.n	b4b72 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b4b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4b72:	4635      	mov	r5, r6
   b4b74:	e7dc      	b.n	b4b30 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b4b76:	bf00      	nop
   b4b78:	2003e174 	.word	0x2003e174

000b4b7c <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b4b7c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b4b7e:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b4b82:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b4b84:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b4b86:	4604      	mov	r4, r0
   b4b88:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b4b8a:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b4b8c:	f000 80c9 	beq.w	b4d22 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b4b90:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b4b94:	2101      	movs	r1, #1
   b4b96:	b280      	uxth	r0, r0
   b4b98:	f001 fa24 	bl	b5fe4 <pinMode>
    pinMode(cs, OUTPUT);
   b4b9c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4ba0:	2101      	movs	r1, #1
   b4ba2:	b280      	uxth	r0, r0
   b4ba4:	f001 fa1e 	bl	b5fe4 <pinMode>
    if (!hwSPI){
   b4ba8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4bac:	2b00      	cmp	r3, #0
   b4bae:	f000 80a6 	beq.w	b4cfe <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b4bb2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4bb6:	2101      	movs	r1, #1
   b4bb8:	b280      	uxth	r0, r0
   b4bba:	f001 fa24 	bl	b6006 <digitalWrite>
        instance().setBitOrder(order);
   b4bbe:	f7ff fefd 	bl	b49bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4bc2:	2101      	movs	r1, #1
   b4bc4:	f000 fdf0 	bl	b57a8 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b4bc8:	f7ff fef8 	bl	b49bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4bcc:	2110      	movs	r1, #16
   b4bce:	f000 fe5b 	bl	b5888 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b4bd2:	f7ff fef3 	bl	b49bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4bd6:	2100      	movs	r1, #0
   b4bd8:	f000 fdfa 	bl	b57d0 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b4bdc:	f7ff feee 	bl	b49bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4be0:	f000 fdce 	bl	b5780 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b4be4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4be8:	2101      	movs	r1, #1
   b4bea:	b280      	uxth	r0, r0
   b4bec:	f001 f9fa 	bl	b5fe4 <pinMode>
  digitalWrite(rst, HIGH);
   b4bf0:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4bf4:	2101      	movs	r1, #1
   b4bf6:	b280      	uxth	r0, r0
   b4bf8:	f001 fa05 	bl	b6006 <digitalWrite>
  delay(1);
   b4bfc:	2001      	movs	r0, #1
   b4bfe:	f000 fb21 	bl	b5244 <delay>
  digitalWrite(rst, LOW);
   b4c02:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4c06:	2100      	movs	r1, #0
   b4c08:	b280      	uxth	r0, r0
   b4c0a:	f001 f9fc 	bl	b6006 <digitalWrite>
  delay(10);
   b4c0e:	200a      	movs	r0, #10
   b4c10:	f000 fb18 	bl	b5244 <delay>
  digitalWrite(rst, HIGH);
   b4c14:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4c18:	2101      	movs	r1, #1
   b4c1a:	b280      	uxth	r0, r0
   b4c1c:	f001 f9f3 	bl	b6006 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b4c20:	4620      	mov	r0, r4
   b4c22:	21ae      	movs	r1, #174	; 0xae
   b4c24:	f7ff fefc 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b4c28:	4620      	mov	r0, r4
   b4c2a:	21d5      	movs	r1, #213	; 0xd5
   b4c2c:	f7ff fef8 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b4c30:	4620      	mov	r0, r4
   b4c32:	2180      	movs	r1, #128	; 0x80
   b4c34:	f7ff fef4 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b4c38:	4620      	mov	r0, r4
   b4c3a:	21a8      	movs	r1, #168	; 0xa8
   b4c3c:	f7ff fef0 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b4c40:	4620      	mov	r0, r4
   b4c42:	213f      	movs	r1, #63	; 0x3f
   b4c44:	f7ff feec 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b4c48:	4620      	mov	r0, r4
   b4c4a:	21d3      	movs	r1, #211	; 0xd3
   b4c4c:	f7ff fee8 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b4c50:	4620      	mov	r0, r4
   b4c52:	2100      	movs	r1, #0
   b4c54:	f7ff fee4 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b4c58:	4620      	mov	r0, r4
   b4c5a:	2140      	movs	r1, #64	; 0x40
   b4c5c:	f7ff fee0 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b4c60:	218d      	movs	r1, #141	; 0x8d
   b4c62:	4620      	mov	r0, r4
   b4c64:	f7ff fedc 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b4c68:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b4c6a:	bf0c      	ite	eq
   b4c6c:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b4c6e:	2114      	movne	r1, #20
   b4c70:	4620      	mov	r0, r4
   b4c72:	f7ff fed5 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b4c76:	4620      	mov	r0, r4
   b4c78:	2120      	movs	r1, #32
   b4c7a:	f7ff fed1 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b4c7e:	4620      	mov	r0, r4
   b4c80:	2100      	movs	r1, #0
   b4c82:	f7ff fecd 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b4c86:	4620      	mov	r0, r4
   b4c88:	21a1      	movs	r1, #161	; 0xa1
   b4c8a:	f7ff fec9 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b4c8e:	4620      	mov	r0, r4
   b4c90:	21c8      	movs	r1, #200	; 0xc8
   b4c92:	f7ff fec5 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b4c96:	4620      	mov	r0, r4
   b4c98:	21da      	movs	r1, #218	; 0xda
   b4c9a:	f7ff fec1 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b4c9e:	4620      	mov	r0, r4
   b4ca0:	2112      	movs	r1, #18
   b4ca2:	f7ff febd 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b4ca6:	2181      	movs	r1, #129	; 0x81
   b4ca8:	4620      	mov	r0, r4
   b4caa:	f7ff feb9 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b4cae:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b4cb0:	bf0c      	ite	eq
   b4cb2:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b4cb4:	21cf      	movne	r1, #207	; 0xcf
   b4cb6:	4620      	mov	r0, r4
   b4cb8:	f7ff feb2 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b4cbc:	21d9      	movs	r1, #217	; 0xd9
   b4cbe:	4620      	mov	r0, r4
   b4cc0:	f7ff feae 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b4cc4:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b4cc6:	bf0c      	ite	eq
   b4cc8:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b4cca:	21f1      	movne	r1, #241	; 0xf1
   b4ccc:	4620      	mov	r0, r4
   b4cce:	f7ff fea7 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b4cd2:	4620      	mov	r0, r4
   b4cd4:	21db      	movs	r1, #219	; 0xdb
   b4cd6:	f7ff fea3 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b4cda:	4620      	mov	r0, r4
   b4cdc:	2140      	movs	r1, #64	; 0x40
   b4cde:	f7ff fe9f 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b4ce2:	4620      	mov	r0, r4
   b4ce4:	21a4      	movs	r1, #164	; 0xa4
   b4ce6:	f7ff fe9b 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b4cea:	4620      	mov	r0, r4
   b4cec:	21a6      	movs	r1, #166	; 0xa6
   b4cee:	f7ff fe97 	bl	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b4cf2:	4620      	mov	r0, r4
   b4cf4:	21af      	movs	r1, #175	; 0xaf
}
   b4cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b4cfa:	f7ff be91 	b.w	b4a20 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b4cfe:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b4d02:	2101      	movs	r1, #1
   b4d04:	b280      	uxth	r0, r0
   b4d06:	f001 f96d 	bl	b5fe4 <pinMode>
    	pinMode(sclk, OUTPUT);
   b4d0a:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b4d0e:	2101      	movs	r1, #1
   b4d10:	b280      	uxth	r0, r0
   b4d12:	f001 f967 	bl	b5fe4 <pinMode>
    if (hwSPI){
   b4d16:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4d1a:	2b00      	cmp	r3, #0
   b4d1c:	f43f af62 	beq.w	b4be4 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b4d20:	e747      	b.n	b4bb2 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b4d22:	f001 f9d5 	bl	b60d0 <_Z19__fetch_global_Wirev>
   b4d26:	f000 fb31 	bl	b538c <_ZN7TwoWire5beginEv>
   b4d2a:	e75b      	b.n	b4be4 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b4d2c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4d2c:	b508      	push	{r3, lr}
   b4d2e:	4b02      	ldr	r3, [pc, #8]	; (b4d38 <os_mutex_recursive_create+0xc>)
   b4d30:	681b      	ldr	r3, [r3, #0]
   b4d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d34:	9301      	str	r3, [sp, #4]
   b4d36:	bd08      	pop	{r3, pc}
   b4d38:	00030248 	.word	0x00030248

000b4d3c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4d3c:	b508      	push	{r3, lr}
   b4d3e:	4b02      	ldr	r3, [pc, #8]	; (b4d48 <os_mutex_recursive_destroy+0xc>)
   b4d40:	681b      	ldr	r3, [r3, #0]
   b4d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4d44:	9301      	str	r3, [sp, #4]
   b4d46:	bd08      	pop	{r3, pc}
   b4d48:	00030248 	.word	0x00030248

000b4d4c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4d4c:	b508      	push	{r3, lr}
   b4d4e:	4b02      	ldr	r3, [pc, #8]	; (b4d58 <HAL_RNG_GetRandomNumber+0xc>)
   b4d50:	681b      	ldr	r3, [r3, #0]
   b4d52:	685b      	ldr	r3, [r3, #4]
   b4d54:	9301      	str	r3, [sp, #4]
   b4d56:	bd08      	pop	{r3, pc}
   b4d58:	00030218 	.word	0x00030218

000b4d5c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4d5c:	b508      	push	{r3, lr}
   b4d5e:	4b02      	ldr	r3, [pc, #8]	; (b4d68 <HAL_Delay_Microseconds+0xc>)
   b4d60:	681b      	ldr	r3, [r3, #0]
   b4d62:	68db      	ldr	r3, [r3, #12]
   b4d64:	9301      	str	r3, [sp, #4]
   b4d66:	bd08      	pop	{r3, pc}
   b4d68:	00030218 	.word	0x00030218

000b4d6c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4d6c:	b508      	push	{r3, lr}
   b4d6e:	4b02      	ldr	r3, [pc, #8]	; (b4d78 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4d70:	681b      	ldr	r3, [r3, #0]
   b4d72:	695b      	ldr	r3, [r3, #20]
   b4d74:	9301      	str	r3, [sp, #4]
   b4d76:	bd08      	pop	{r3, pc}
   b4d78:	00030218 	.word	0x00030218

000b4d7c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b4d7c:	b508      	push	{r3, lr}
   b4d7e:	4b02      	ldr	r3, [pc, #8]	; (b4d88 <hal_rtc_time_is_valid+0xc>)
   b4d80:	681b      	ldr	r3, [r3, #0]
   b4d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4d84:	9301      	str	r3, [sp, #4]
   b4d86:	bd08      	pop	{r3, pc}
   b4d88:	00030218 	.word	0x00030218

000b4d8c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b4d8c:	b508      	push	{r3, lr}
   b4d8e:	4b02      	ldr	r3, [pc, #8]	; (b4d98 <hal_rtc_get_time+0xc>)
   b4d90:	681b      	ldr	r3, [r3, #0]
   b4d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b4d94:	9301      	str	r3, [sp, #4]
   b4d96:	bd08      	pop	{r3, pc}
   b4d98:	00030218 	.word	0x00030218

000b4d9c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4d9c:	b508      	push	{r3, lr}
   b4d9e:	4b02      	ldr	r3, [pc, #8]	; (b4da8 <HAL_Pin_Mode+0xc>)
   b4da0:	681b      	ldr	r3, [r3, #0]
   b4da2:	689b      	ldr	r3, [r3, #8]
   b4da4:	9301      	str	r3, [sp, #4]
   b4da6:	bd08      	pop	{r3, pc}
   b4da8:	0003022c 	.word	0x0003022c

000b4dac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4dac:	b508      	push	{r3, lr}
   b4dae:	4b02      	ldr	r3, [pc, #8]	; (b4db8 <HAL_Get_Pin_Mode+0xc>)
   b4db0:	681b      	ldr	r3, [r3, #0]
   b4db2:	68db      	ldr	r3, [r3, #12]
   b4db4:	9301      	str	r3, [sp, #4]
   b4db6:	bd08      	pop	{r3, pc}
   b4db8:	0003022c 	.word	0x0003022c

000b4dbc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4dbc:	b508      	push	{r3, lr}
   b4dbe:	4b02      	ldr	r3, [pc, #8]	; (b4dc8 <HAL_GPIO_Write+0xc>)
   b4dc0:	681b      	ldr	r3, [r3, #0]
   b4dc2:	691b      	ldr	r3, [r3, #16]
   b4dc4:	9301      	str	r3, [sp, #4]
   b4dc6:	bd08      	pop	{r3, pc}
   b4dc8:	0003022c 	.word	0x0003022c

000b4dcc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b4dcc:	b508      	push	{r3, lr}
   b4dce:	4b02      	ldr	r3, [pc, #8]	; (b4dd8 <HAL_GPIO_Read+0xc>)
   b4dd0:	681b      	ldr	r3, [r3, #0]
   b4dd2:	695b      	ldr	r3, [r3, #20]
   b4dd4:	9301      	str	r3, [sp, #4]
   b4dd6:	bd08      	pop	{r3, pc}
   b4dd8:	0003022c 	.word	0x0003022c

000b4ddc <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4ddc:	b508      	push	{r3, lr}
   b4dde:	4b02      	ldr	r3, [pc, #8]	; (b4de8 <hal_i2c_begin+0xc>)
   b4de0:	681b      	ldr	r3, [r3, #0]
   b4de2:	68db      	ldr	r3, [r3, #12]
   b4de4:	9301      	str	r3, [sp, #4]
   b4de6:	bd08      	pop	{r3, pc}
   b4de8:	00030228 	.word	0x00030228

000b4dec <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4dec:	b508      	push	{r3, lr}
   b4dee:	4b02      	ldr	r3, [pc, #8]	; (b4df8 <hal_i2c_begin_transmission+0xc>)
   b4df0:	681b      	ldr	r3, [r3, #0]
   b4df2:	699b      	ldr	r3, [r3, #24]
   b4df4:	9301      	str	r3, [sp, #4]
   b4df6:	bd08      	pop	{r3, pc}
   b4df8:	00030228 	.word	0x00030228

000b4dfc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4dfc:	b508      	push	{r3, lr}
   b4dfe:	4b02      	ldr	r3, [pc, #8]	; (b4e08 <hal_i2c_end_transmission+0xc>)
   b4e00:	681b      	ldr	r3, [r3, #0]
   b4e02:	69db      	ldr	r3, [r3, #28]
   b4e04:	9301      	str	r3, [sp, #4]
   b4e06:	bd08      	pop	{r3, pc}
   b4e08:	00030228 	.word	0x00030228

000b4e0c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4e0c:	b508      	push	{r3, lr}
   b4e0e:	4b02      	ldr	r3, [pc, #8]	; (b4e18 <hal_i2c_write+0xc>)
   b4e10:	681b      	ldr	r3, [r3, #0]
   b4e12:	6a1b      	ldr	r3, [r3, #32]
   b4e14:	9301      	str	r3, [sp, #4]
   b4e16:	bd08      	pop	{r3, pc}
   b4e18:	00030228 	.word	0x00030228

000b4e1c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4e1c:	b508      	push	{r3, lr}
   b4e1e:	4b02      	ldr	r3, [pc, #8]	; (b4e28 <hal_i2c_available+0xc>)
   b4e20:	681b      	ldr	r3, [r3, #0]
   b4e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4e24:	9301      	str	r3, [sp, #4]
   b4e26:	bd08      	pop	{r3, pc}
   b4e28:	00030228 	.word	0x00030228

000b4e2c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4e2c:	b508      	push	{r3, lr}
   b4e2e:	4b02      	ldr	r3, [pc, #8]	; (b4e38 <hal_i2c_read+0xc>)
   b4e30:	681b      	ldr	r3, [r3, #0]
   b4e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4e34:	9301      	str	r3, [sp, #4]
   b4e36:	bd08      	pop	{r3, pc}
   b4e38:	00030228 	.word	0x00030228

000b4e3c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4e3c:	b508      	push	{r3, lr}
   b4e3e:	4b02      	ldr	r3, [pc, #8]	; (b4e48 <hal_i2c_peek+0xc>)
   b4e40:	681b      	ldr	r3, [r3, #0]
   b4e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e44:	9301      	str	r3, [sp, #4]
   b4e46:	bd08      	pop	{r3, pc}
   b4e48:	00030228 	.word	0x00030228

000b4e4c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4e4c:	b508      	push	{r3, lr}
   b4e4e:	4b02      	ldr	r3, [pc, #8]	; (b4e58 <hal_i2c_flush+0xc>)
   b4e50:	681b      	ldr	r3, [r3, #0]
   b4e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4e54:	9301      	str	r3, [sp, #4]
   b4e56:	bd08      	pop	{r3, pc}
   b4e58:	00030228 	.word	0x00030228

000b4e5c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4e5c:	b508      	push	{r3, lr}
   b4e5e:	4b02      	ldr	r3, [pc, #8]	; (b4e68 <hal_i2c_is_enabled+0xc>)
   b4e60:	681b      	ldr	r3, [r3, #0]
   b4e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4e64:	9301      	str	r3, [sp, #4]
   b4e66:	bd08      	pop	{r3, pc}
   b4e68:	00030228 	.word	0x00030228

000b4e6c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4e6c:	b508      	push	{r3, lr}
   b4e6e:	4b02      	ldr	r3, [pc, #8]	; (b4e78 <hal_i2c_init+0xc>)
   b4e70:	681b      	ldr	r3, [r3, #0]
   b4e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e74:	9301      	str	r3, [sp, #4]
   b4e76:	bd08      	pop	{r3, pc}
   b4e78:	00030228 	.word	0x00030228

000b4e7c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4e7c:	b508      	push	{r3, lr}
   b4e7e:	4b02      	ldr	r3, [pc, #8]	; (b4e88 <inet_inet_ntop+0xc>)
   b4e80:	681b      	ldr	r3, [r3, #0]
   b4e82:	695b      	ldr	r3, [r3, #20]
   b4e84:	9301      	str	r3, [sp, #4]
   b4e86:	bd08      	pop	{r3, pc}
   b4e88:	00030264 	.word	0x00030264

000b4e8c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4e8c:	b508      	push	{r3, lr}
   b4e8e:	4b02      	ldr	r3, [pc, #8]	; (b4e98 <netdb_freeaddrinfo+0xc>)
   b4e90:	681b      	ldr	r3, [r3, #0]
   b4e92:	689b      	ldr	r3, [r3, #8]
   b4e94:	9301      	str	r3, [sp, #4]
   b4e96:	bd08      	pop	{r3, pc}
   b4e98:	00030268 	.word	0x00030268

000b4e9c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4e9c:	b508      	push	{r3, lr}
   b4e9e:	4b02      	ldr	r3, [pc, #8]	; (b4ea8 <netdb_getaddrinfo+0xc>)
   b4ea0:	681b      	ldr	r3, [r3, #0]
   b4ea2:	68db      	ldr	r3, [r3, #12]
   b4ea4:	9301      	str	r3, [sp, #4]
   b4ea6:	bd08      	pop	{r3, pc}
   b4ea8:	00030268 	.word	0x00030268

000b4eac <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b4eac:	b508      	push	{r3, lr}
   b4eae:	4b02      	ldr	r3, [pc, #8]	; (b4eb8 <hal_spi_begin+0xc>)
   b4eb0:	681b      	ldr	r3, [r3, #0]
   b4eb2:	681b      	ldr	r3, [r3, #0]
   b4eb4:	9301      	str	r3, [sp, #4]
   b4eb6:	bd08      	pop	{r3, pc}
   b4eb8:	00030230 	.word	0x00030230

000b4ebc <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b4ebc:	b508      	push	{r3, lr}
   b4ebe:	4b02      	ldr	r3, [pc, #8]	; (b4ec8 <hal_spi_set_bit_order+0xc>)
   b4ec0:	681b      	ldr	r3, [r3, #0]
   b4ec2:	689b      	ldr	r3, [r3, #8]
   b4ec4:	9301      	str	r3, [sp, #4]
   b4ec6:	bd08      	pop	{r3, pc}
   b4ec8:	00030230 	.word	0x00030230

000b4ecc <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b4ecc:	b508      	push	{r3, lr}
   b4ece:	4b02      	ldr	r3, [pc, #8]	; (b4ed8 <hal_spi_set_data_mode+0xc>)
   b4ed0:	681b      	ldr	r3, [r3, #0]
   b4ed2:	68db      	ldr	r3, [r3, #12]
   b4ed4:	9301      	str	r3, [sp, #4]
   b4ed6:	bd08      	pop	{r3, pc}
   b4ed8:	00030230 	.word	0x00030230

000b4edc <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b4edc:	b508      	push	{r3, lr}
   b4ede:	4b02      	ldr	r3, [pc, #8]	; (b4ee8 <hal_spi_set_clock_divider+0xc>)
   b4ee0:	681b      	ldr	r3, [r3, #0]
   b4ee2:	691b      	ldr	r3, [r3, #16]
   b4ee4:	9301      	str	r3, [sp, #4]
   b4ee6:	bd08      	pop	{r3, pc}
   b4ee8:	00030230 	.word	0x00030230

000b4eec <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b4eec:	b508      	push	{r3, lr}
   b4eee:	4b02      	ldr	r3, [pc, #8]	; (b4ef8 <hal_spi_transfer+0xc>)
   b4ef0:	681b      	ldr	r3, [r3, #0]
   b4ef2:	695b      	ldr	r3, [r3, #20]
   b4ef4:	9301      	str	r3, [sp, #4]
   b4ef6:	bd08      	pop	{r3, pc}
   b4ef8:	00030230 	.word	0x00030230

000b4efc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4efc:	b508      	push	{r3, lr}
   b4efe:	4b02      	ldr	r3, [pc, #8]	; (b4f08 <hal_spi_init+0xc>)
   b4f00:	681b      	ldr	r3, [r3, #0]
   b4f02:	69db      	ldr	r3, [r3, #28]
   b4f04:	9301      	str	r3, [sp, #4]
   b4f06:	bd08      	pop	{r3, pc}
   b4f08:	00030230 	.word	0x00030230

000b4f0c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4f0c:	b508      	push	{r3, lr}
   b4f0e:	4b02      	ldr	r3, [pc, #8]	; (b4f18 <hal_spi_is_enabled+0xc>)
   b4f10:	681b      	ldr	r3, [r3, #0]
   b4f12:	6a1b      	ldr	r3, [r3, #32]
   b4f14:	9301      	str	r3, [sp, #4]
   b4f16:	bd08      	pop	{r3, pc}
   b4f18:	00030230 	.word	0x00030230

000b4f1c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b4f1c:	b508      	push	{r3, lr}
   b4f1e:	4b02      	ldr	r3, [pc, #8]	; (b4f28 <hal_spi_info+0xc>)
   b4f20:	681b      	ldr	r3, [r3, #0]
   b4f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4f24:	9301      	str	r3, [sp, #4]
   b4f26:	bd08      	pop	{r3, pc}
   b4f28:	00030230 	.word	0x00030230

000b4f2c <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b4f2c:	b508      	push	{r3, lr}
   b4f2e:	4b02      	ldr	r3, [pc, #8]	; (b4f38 <hal_spi_acquire+0xc>)
   b4f30:	681b      	ldr	r3, [r3, #0]
   b4f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f34:	9301      	str	r3, [sp, #4]
   b4f36:	bd08      	pop	{r3, pc}
   b4f38:	00030230 	.word	0x00030230

000b4f3c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b4f3c:	b508      	push	{r3, lr}
   b4f3e:	4b02      	ldr	r3, [pc, #8]	; (b4f48 <hal_spi_release+0xc>)
   b4f40:	681b      	ldr	r3, [r3, #0]
   b4f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4f44:	9301      	str	r3, [sp, #4]
   b4f46:	bd08      	pop	{r3, pc}
   b4f48:	00030230 	.word	0x00030230

000b4f4c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   b4f4c:	b508      	push	{r3, lr}
   b4f4e:	4b02      	ldr	r3, [pc, #8]	; (b4f58 <hal_usart_init+0xc>)
   b4f50:	681b      	ldr	r3, [r3, #0]
   b4f52:	681b      	ldr	r3, [r3, #0]
   b4f54:	9301      	str	r3, [sp, #4]
   b4f56:	bd08      	pop	{r3, pc}
   b4f58:	0003023c 	.word	0x0003023c

000b4f5c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4f5c:	b508      	push	{r3, lr}
   b4f5e:	4b02      	ldr	r3, [pc, #8]	; (b4f68 <hal_usart_write+0xc>)
   b4f60:	681b      	ldr	r3, [r3, #0]
   b4f62:	68db      	ldr	r3, [r3, #12]
   b4f64:	9301      	str	r3, [sp, #4]
   b4f66:	bd08      	pop	{r3, pc}
   b4f68:	0003023c 	.word	0x0003023c

000b4f6c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4f6c:	b508      	push	{r3, lr}
   b4f6e:	4b02      	ldr	r3, [pc, #8]	; (b4f78 <hal_usart_available+0xc>)
   b4f70:	681b      	ldr	r3, [r3, #0]
   b4f72:	691b      	ldr	r3, [r3, #16]
   b4f74:	9301      	str	r3, [sp, #4]
   b4f76:	bd08      	pop	{r3, pc}
   b4f78:	0003023c 	.word	0x0003023c

000b4f7c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4f7c:	b508      	push	{r3, lr}
   b4f7e:	4b02      	ldr	r3, [pc, #8]	; (b4f88 <hal_usart_read+0xc>)
   b4f80:	681b      	ldr	r3, [r3, #0]
   b4f82:	695b      	ldr	r3, [r3, #20]
   b4f84:	9301      	str	r3, [sp, #4]
   b4f86:	bd08      	pop	{r3, pc}
   b4f88:	0003023c 	.word	0x0003023c

000b4f8c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4f8c:	b508      	push	{r3, lr}
   b4f8e:	4b02      	ldr	r3, [pc, #8]	; (b4f98 <hal_usart_peek+0xc>)
   b4f90:	681b      	ldr	r3, [r3, #0]
   b4f92:	699b      	ldr	r3, [r3, #24]
   b4f94:	9301      	str	r3, [sp, #4]
   b4f96:	bd08      	pop	{r3, pc}
   b4f98:	0003023c 	.word	0x0003023c

000b4f9c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4f9c:	b508      	push	{r3, lr}
   b4f9e:	4b02      	ldr	r3, [pc, #8]	; (b4fa8 <hal_usart_flush+0xc>)
   b4fa0:	681b      	ldr	r3, [r3, #0]
   b4fa2:	69db      	ldr	r3, [r3, #28]
   b4fa4:	9301      	str	r3, [sp, #4]
   b4fa6:	bd08      	pop	{r3, pc}
   b4fa8:	0003023c 	.word	0x0003023c

000b4fac <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4fac:	b508      	push	{r3, lr}
   b4fae:	4b02      	ldr	r3, [pc, #8]	; (b4fb8 <hal_usart_is_enabled+0xc>)
   b4fb0:	681b      	ldr	r3, [r3, #0]
   b4fb2:	6a1b      	ldr	r3, [r3, #32]
   b4fb4:	9301      	str	r3, [sp, #4]
   b4fb6:	bd08      	pop	{r3, pc}
   b4fb8:	0003023c 	.word	0x0003023c

000b4fbc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4fbc:	b508      	push	{r3, lr}
   b4fbe:	4b02      	ldr	r3, [pc, #8]	; (b4fc8 <hal_usart_available_data_for_write+0xc>)
   b4fc0:	681b      	ldr	r3, [r3, #0]
   b4fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4fc4:	9301      	str	r3, [sp, #4]
   b4fc6:	bd08      	pop	{r3, pc}
   b4fc8:	0003023c 	.word	0x0003023c

000b4fcc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4fcc:	b508      	push	{r3, lr}
   b4fce:	4b02      	ldr	r3, [pc, #8]	; (b4fd8 <HAL_USB_USART_Init+0xc>)
   b4fd0:	681b      	ldr	r3, [r3, #0]
   b4fd2:	681b      	ldr	r3, [r3, #0]
   b4fd4:	9301      	str	r3, [sp, #4]
   b4fd6:	bd08      	pop	{r3, pc}
   b4fd8:	0003024c 	.word	0x0003024c

000b4fdc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4fdc:	b508      	push	{r3, lr}
   b4fde:	4b02      	ldr	r3, [pc, #8]	; (b4fe8 <HAL_USB_USART_Begin+0xc>)
   b4fe0:	681b      	ldr	r3, [r3, #0]
   b4fe2:	685b      	ldr	r3, [r3, #4]
   b4fe4:	9301      	str	r3, [sp, #4]
   b4fe6:	bd08      	pop	{r3, pc}
   b4fe8:	0003024c 	.word	0x0003024c

000b4fec <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4fec:	b508      	push	{r3, lr}
   b4fee:	4b02      	ldr	r3, [pc, #8]	; (b4ff8 <HAL_USB_USART_Available_Data+0xc>)
   b4ff0:	681b      	ldr	r3, [r3, #0]
   b4ff2:	691b      	ldr	r3, [r3, #16]
   b4ff4:	9301      	str	r3, [sp, #4]
   b4ff6:	bd08      	pop	{r3, pc}
   b4ff8:	0003024c 	.word	0x0003024c

000b4ffc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4ffc:	b508      	push	{r3, lr}
   b4ffe:	4b02      	ldr	r3, [pc, #8]	; (b5008 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5000:	681b      	ldr	r3, [r3, #0]
   b5002:	695b      	ldr	r3, [r3, #20]
   b5004:	9301      	str	r3, [sp, #4]
   b5006:	bd08      	pop	{r3, pc}
   b5008:	0003024c 	.word	0x0003024c

000b500c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b500c:	b508      	push	{r3, lr}
   b500e:	4b02      	ldr	r3, [pc, #8]	; (b5018 <HAL_USB_USART_Receive_Data+0xc>)
   b5010:	681b      	ldr	r3, [r3, #0]
   b5012:	699b      	ldr	r3, [r3, #24]
   b5014:	9301      	str	r3, [sp, #4]
   b5016:	bd08      	pop	{r3, pc}
   b5018:	0003024c 	.word	0x0003024c

000b501c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b501c:	b508      	push	{r3, lr}
   b501e:	4b02      	ldr	r3, [pc, #8]	; (b5028 <HAL_USB_USART_Send_Data+0xc>)
   b5020:	681b      	ldr	r3, [r3, #0]
   b5022:	69db      	ldr	r3, [r3, #28]
   b5024:	9301      	str	r3, [sp, #4]
   b5026:	bd08      	pop	{r3, pc}
   b5028:	0003024c 	.word	0x0003024c

000b502c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b502c:	b508      	push	{r3, lr}
   b502e:	4b02      	ldr	r3, [pc, #8]	; (b5038 <HAL_USB_USART_Flush_Data+0xc>)
   b5030:	681b      	ldr	r3, [r3, #0]
   b5032:	6a1b      	ldr	r3, [r3, #32]
   b5034:	9301      	str	r3, [sp, #4]
   b5036:	bd08      	pop	{r3, pc}
   b5038:	0003024c 	.word	0x0003024c

000b503c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b503c:	b508      	push	{r3, lr}
   b503e:	4b02      	ldr	r3, [pc, #8]	; (b5048 <panic_+0xc>)
   b5040:	681b      	ldr	r3, [r3, #0]
   b5042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5044:	9301      	str	r3, [sp, #4]
   b5046:	bd08      	pop	{r3, pc}
   b5048:	00030260 	.word	0x00030260

000b504c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b504c:	b508      	push	{r3, lr}
   b504e:	4b02      	ldr	r3, [pc, #8]	; (b5058 <system_mode+0xc>)
   b5050:	681b      	ldr	r3, [r3, #0]
   b5052:	681b      	ldr	r3, [r3, #0]
   b5054:	9301      	str	r3, [sp, #4]
   b5056:	bd08      	pop	{r3, pc}
   b5058:	00030220 	.word	0x00030220

000b505c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b505c:	b508      	push	{r3, lr}
   b505e:	4b02      	ldr	r3, [pc, #8]	; (b5068 <set_system_mode+0xc>)
   b5060:	681b      	ldr	r3, [r3, #0]
   b5062:	685b      	ldr	r3, [r3, #4]
   b5064:	9301      	str	r3, [sp, #4]
   b5066:	bd08      	pop	{r3, pc}
   b5068:	00030220 	.word	0x00030220

000b506c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b506c:	b508      	push	{r3, lr}
   b506e:	4b02      	ldr	r3, [pc, #8]	; (b5078 <system_delay_ms+0xc>)
   b5070:	681b      	ldr	r3, [r3, #0]
   b5072:	695b      	ldr	r3, [r3, #20]
   b5074:	9301      	str	r3, [sp, #4]
   b5076:	bd08      	pop	{r3, pc}
   b5078:	00030220 	.word	0x00030220

000b507c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b507c:	b508      	push	{r3, lr}
   b507e:	4b02      	ldr	r3, [pc, #8]	; (b5088 <system_thread_get_state+0xc>)
   b5080:	681b      	ldr	r3, [r3, #0]
   b5082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5084:	9301      	str	r3, [sp, #4]
   b5086:	bd08      	pop	{r3, pc}
   b5088:	00030220 	.word	0x00030220

000b508c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b508c:	b508      	push	{r3, lr}
   b508e:	4b03      	ldr	r3, [pc, #12]	; (b509c <system_ctrl_set_app_request_handler+0x10>)
   b5090:	681b      	ldr	r3, [r3, #0]
   b5092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5096:	9301      	str	r3, [sp, #4]
   b5098:	bd08      	pop	{r3, pc}
   b509a:	0000      	.short	0x0000
   b509c:	00030220 	.word	0x00030220

000b50a0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b50a0:	b508      	push	{r3, lr}
   b50a2:	4b03      	ldr	r3, [pc, #12]	; (b50b0 <system_ctrl_set_result+0x10>)
   b50a4:	681b      	ldr	r3, [r3, #0]
   b50a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b50aa:	9301      	str	r3, [sp, #4]
   b50ac:	bd08      	pop	{r3, pc}
   b50ae:	0000      	.short	0x0000
   b50b0:	00030220 	.word	0x00030220

000b50b4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b50b4:	b508      	push	{r3, lr}
   b50b6:	4b02      	ldr	r3, [pc, #8]	; (b50c0 <spark_process+0xc>)
   b50b8:	681b      	ldr	r3, [r3, #0]
   b50ba:	689b      	ldr	r3, [r3, #8]
   b50bc:	9301      	str	r3, [sp, #4]
   b50be:	bd08      	pop	{r3, pc}
   b50c0:	00030244 	.word	0x00030244

000b50c4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b50c4:	b508      	push	{r3, lr}
   b50c6:	4b02      	ldr	r3, [pc, #8]	; (b50d0 <spark_cloud_flag_connected+0xc>)
   b50c8:	681b      	ldr	r3, [r3, #0]
   b50ca:	695b      	ldr	r3, [r3, #20]
   b50cc:	9301      	str	r3, [sp, #4]
   b50ce:	bd08      	pop	{r3, pc}
   b50d0:	00030244 	.word	0x00030244

000b50d4 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b50d4:	b508      	push	{r3, lr}
   b50d6:	4b02      	ldr	r3, [pc, #8]	; (b50e0 <spark_sync_time+0xc>)
   b50d8:	681b      	ldr	r3, [r3, #0]
   b50da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b50dc:	9301      	str	r3, [sp, #4]
   b50de:	bd08      	pop	{r3, pc}
   b50e0:	00030244 	.word	0x00030244

000b50e4 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b50e4:	b508      	push	{r3, lr}
   b50e6:	4b02      	ldr	r3, [pc, #8]	; (b50f0 <spark_sync_time_pending+0xc>)
   b50e8:	681b      	ldr	r3, [r3, #0]
   b50ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b50ec:	9301      	str	r3, [sp, #4]
   b50ee:	bd08      	pop	{r3, pc}
   b50f0:	00030244 	.word	0x00030244

000b50f4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b50f4:	b508      	push	{r3, lr}
   b50f6:	4b02      	ldr	r3, [pc, #8]	; (b5100 <spark_set_random_seed_from_cloud_handler+0xc>)
   b50f8:	681b      	ldr	r3, [r3, #0]
   b50fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b50fc:	9301      	str	r3, [sp, #4]
   b50fe:	bd08      	pop	{r3, pc}
   b5100:	00030244 	.word	0x00030244

000b5104 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5104:	b508      	push	{r3, lr}
   b5106:	4b02      	ldr	r3, [pc, #8]	; (b5110 <network_connect+0xc>)
   b5108:	681b      	ldr	r3, [r3, #0]
   b510a:	685b      	ldr	r3, [r3, #4]
   b510c:	9301      	str	r3, [sp, #4]
   b510e:	bd08      	pop	{r3, pc}
   b5110:	00030240 	.word	0x00030240

000b5114 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5114:	b508      	push	{r3, lr}
   b5116:	4b02      	ldr	r3, [pc, #8]	; (b5120 <network_connecting+0xc>)
   b5118:	681b      	ldr	r3, [r3, #0]
   b511a:	689b      	ldr	r3, [r3, #8]
   b511c:	9301      	str	r3, [sp, #4]
   b511e:	bd08      	pop	{r3, pc}
   b5120:	00030240 	.word	0x00030240

000b5124 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5124:	b508      	push	{r3, lr}
   b5126:	4b02      	ldr	r3, [pc, #8]	; (b5130 <network_disconnect+0xc>)
   b5128:	681b      	ldr	r3, [r3, #0]
   b512a:	68db      	ldr	r3, [r3, #12]
   b512c:	9301      	str	r3, [sp, #4]
   b512e:	bd08      	pop	{r3, pc}
   b5130:	00030240 	.word	0x00030240

000b5134 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5134:	b508      	push	{r3, lr}
   b5136:	4b02      	ldr	r3, [pc, #8]	; (b5140 <network_ready+0xc>)
   b5138:	681b      	ldr	r3, [r3, #0]
   b513a:	691b      	ldr	r3, [r3, #16]
   b513c:	9301      	str	r3, [sp, #4]
   b513e:	bd08      	pop	{r3, pc}
   b5140:	00030240 	.word	0x00030240

000b5144 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5144:	b508      	push	{r3, lr}
   b5146:	4b02      	ldr	r3, [pc, #8]	; (b5150 <network_on+0xc>)
   b5148:	681b      	ldr	r3, [r3, #0]
   b514a:	695b      	ldr	r3, [r3, #20]
   b514c:	9301      	str	r3, [sp, #4]
   b514e:	bd08      	pop	{r3, pc}
   b5150:	00030240 	.word	0x00030240

000b5154 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5154:	b508      	push	{r3, lr}
   b5156:	4b02      	ldr	r3, [pc, #8]	; (b5160 <network_off+0xc>)
   b5158:	681b      	ldr	r3, [r3, #0]
   b515a:	699b      	ldr	r3, [r3, #24]
   b515c:	9301      	str	r3, [sp, #4]
   b515e:	bd08      	pop	{r3, pc}
   b5160:	00030240 	.word	0x00030240

000b5164 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5164:	b508      	push	{r3, lr}
   b5166:	4b02      	ldr	r3, [pc, #8]	; (b5170 <network_listen+0xc>)
   b5168:	681b      	ldr	r3, [r3, #0]
   b516a:	69db      	ldr	r3, [r3, #28]
   b516c:	9301      	str	r3, [sp, #4]
   b516e:	bd08      	pop	{r3, pc}
   b5170:	00030240 	.word	0x00030240

000b5174 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5174:	b508      	push	{r3, lr}
   b5176:	4b02      	ldr	r3, [pc, #8]	; (b5180 <network_listening+0xc>)
   b5178:	681b      	ldr	r3, [r3, #0]
   b517a:	6a1b      	ldr	r3, [r3, #32]
   b517c:	9301      	str	r3, [sp, #4]
   b517e:	bd08      	pop	{r3, pc}
   b5180:	00030240 	.word	0x00030240

000b5184 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5184:	b508      	push	{r3, lr}
   b5186:	4b02      	ldr	r3, [pc, #8]	; (b5190 <network_set_listen_timeout+0xc>)
   b5188:	681b      	ldr	r3, [r3, #0]
   b518a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b518c:	9301      	str	r3, [sp, #4]
   b518e:	bd08      	pop	{r3, pc}
   b5190:	00030240 	.word	0x00030240

000b5194 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5194:	b508      	push	{r3, lr}
   b5196:	4b02      	ldr	r3, [pc, #8]	; (b51a0 <network_get_listen_timeout+0xc>)
   b5198:	681b      	ldr	r3, [r3, #0]
   b519a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b519c:	9301      	str	r3, [sp, #4]
   b519e:	bd08      	pop	{r3, pc}
   b51a0:	00030240 	.word	0x00030240

000b51a4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b51a4:	b508      	push	{r3, lr}
   b51a6:	4b02      	ldr	r3, [pc, #8]	; (b51b0 <network_is_on+0xc>)
   b51a8:	681b      	ldr	r3, [r3, #0]
   b51aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b51ac:	9301      	str	r3, [sp, #4]
   b51ae:	bd08      	pop	{r3, pc}
   b51b0:	00030240 	.word	0x00030240

000b51b4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b51b4:	b508      	push	{r3, lr}
   b51b6:	4b02      	ldr	r3, [pc, #8]	; (b51c0 <network_is_off+0xc>)
   b51b8:	681b      	ldr	r3, [r3, #0]
   b51ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b51bc:	9301      	str	r3, [sp, #4]
   b51be:	bd08      	pop	{r3, pc}
   b51c0:	00030240 	.word	0x00030240

000b51c4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b51c4:	b508      	push	{r3, lr}
   b51c6:	4b02      	ldr	r3, [pc, #8]	; (b51d0 <malloc+0xc>)
   b51c8:	681b      	ldr	r3, [r3, #0]
   b51ca:	681b      	ldr	r3, [r3, #0]
   b51cc:	9301      	str	r3, [sp, #4]
   b51ce:	bd08      	pop	{r3, pc}
   b51d0:	0003021c 	.word	0x0003021c

000b51d4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b51d4:	b508      	push	{r3, lr}
   b51d6:	4b02      	ldr	r3, [pc, #8]	; (b51e0 <free+0xc>)
   b51d8:	681b      	ldr	r3, [r3, #0]
   b51da:	685b      	ldr	r3, [r3, #4]
   b51dc:	9301      	str	r3, [sp, #4]
   b51de:	bd08      	pop	{r3, pc}
   b51e0:	0003021c 	.word	0x0003021c

000b51e4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b51e4:	b508      	push	{r3, lr}
   b51e6:	4b02      	ldr	r3, [pc, #8]	; (b51f0 <realloc+0xc>)
   b51e8:	681b      	ldr	r3, [r3, #0]
   b51ea:	689b      	ldr	r3, [r3, #8]
   b51ec:	9301      	str	r3, [sp, #4]
   b51ee:	bd08      	pop	{r3, pc}
   b51f0:	0003021c 	.word	0x0003021c

000b51f4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b51f4:	b508      	push	{r3, lr}
   b51f6:	4b02      	ldr	r3, [pc, #8]	; (b5200 <siprintf+0xc>)
   b51f8:	681b      	ldr	r3, [r3, #0]
   b51fa:	691b      	ldr	r3, [r3, #16]
   b51fc:	9301      	str	r3, [sp, #4]
   b51fe:	bd08      	pop	{r3, pc}
   b5200:	0003021c 	.word	0x0003021c

000b5204 <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5204:	b508      	push	{r3, lr}
   b5206:	4b02      	ldr	r3, [pc, #8]	; (b5210 <vsnprintf+0xc>)
   b5208:	681b      	ldr	r3, [r3, #0]
   b520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b520c:	9301      	str	r3, [sp, #4]
   b520e:	bd08      	pop	{r3, pc}
   b5210:	0003021c 	.word	0x0003021c

000b5214 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5214:	b508      	push	{r3, lr}
   b5216:	4b02      	ldr	r3, [pc, #8]	; (b5220 <__assert_func+0xc>)
   b5218:	681b      	ldr	r3, [r3, #0]
   b521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b521c:	9301      	str	r3, [sp, #4]
   b521e:	bd08      	pop	{r3, pc}
   b5220:	0003021c 	.word	0x0003021c

000b5224 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5224:	b508      	push	{r3, lr}
   b5226:	4b02      	ldr	r3, [pc, #8]	; (b5230 <newlib_impure_ptr_callback+0xc>)
   b5228:	681b      	ldr	r3, [r3, #0]
   b522a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b522c:	9301      	str	r3, [sp, #4]
   b522e:	bd08      	pop	{r3, pc}
   b5230:	0003021c 	.word	0x0003021c

000b5234 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b5234:	b508      	push	{r3, lr}
   b5236:	4b02      	ldr	r3, [pc, #8]	; (b5240 <localtime_r+0xc>)
   b5238:	681b      	ldr	r3, [r3, #0]
   b523a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b523c:	9301      	str	r3, [sp, #4]
   b523e:	bd08      	pop	{r3, pc}
   b5240:	0003021c 	.word	0x0003021c

000b5244 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5244:	2100      	movs	r1, #0
   b5246:	f7ff bf11 	b.w	b506c <system_delay_ms>

000b524a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   b524a:	b510      	push	{r4, lr}
   b524c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   b524e:	6800      	ldr	r0, [r0, #0]
   b5250:	b108      	cbz	r0, b5256 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   b5252:	f7ff fd73 	bl	b4d3c <os_mutex_recursive_destroy>
    }
   b5256:	4620      	mov	r0, r4
   b5258:	bd10      	pop	{r4, pc}

000b525a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b525a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b525c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b525e:	4604      	mov	r4, r0
      if (_M_manager)
   b5260:	b113      	cbz	r3, b5268 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5262:	2203      	movs	r2, #3
   b5264:	4601      	mov	r1, r0
   b5266:	4798      	blx	r3
    }
   b5268:	4620      	mov	r0, r4
   b526a:	bd10      	pop	{r4, pc}

000b526c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   b526c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   b526e:	4c06      	ldr	r4, [pc, #24]	; (b5288 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   b5270:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   b5272:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   b5274:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   b5276:	f7ff fd59 	bl	b4d2c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   b527a:	4620      	mov	r0, r4
   b527c:	4a03      	ldr	r2, [pc, #12]	; (b528c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   b527e:	4904      	ldr	r1, [pc, #16]	; (b5290 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   b5280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   b5284:	f000 bf4c 	b.w	b6120 <__aeabi_atexit>
   b5288:	2003e644 	.word	0x2003e644
   b528c:	2003e5e0 	.word	0x2003e5e0
   b5290:	000b524b 	.word	0x000b524b

000b5294 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5294:	2200      	movs	r2, #0
   b5296:	6840      	ldr	r0, [r0, #4]
   b5298:	4611      	mov	r1, r2
   b529a:	f7ff bf6b 	b.w	b5174 <network_listening>

000b529e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b529e:	2200      	movs	r2, #0
   b52a0:	6840      	ldr	r0, [r0, #4]
   b52a2:	4611      	mov	r1, r2
   b52a4:	f7ff bf76 	b.w	b5194 <network_get_listen_timeout>

000b52a8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b52a8:	6840      	ldr	r0, [r0, #4]
   b52aa:	2200      	movs	r2, #0
   b52ac:	f7ff bf6a 	b.w	b5184 <network_set_listen_timeout>

000b52b0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b52b0:	6840      	ldr	r0, [r0, #4]
   b52b2:	2200      	movs	r2, #0
   b52b4:	f081 0101 	eor.w	r1, r1, #1
   b52b8:	f7ff bf54 	b.w	b5164 <network_listen>

000b52bc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b52bc:	2300      	movs	r3, #0
   b52be:	6840      	ldr	r0, [r0, #4]
   b52c0:	461a      	mov	r2, r3
   b52c2:	4619      	mov	r1, r3
   b52c4:	f7ff bf46 	b.w	b5154 <network_off>

000b52c8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b52c8:	2300      	movs	r3, #0
   b52ca:	6840      	ldr	r0, [r0, #4]
   b52cc:	461a      	mov	r2, r3
   b52ce:	4619      	mov	r1, r3
   b52d0:	f7ff bf38 	b.w	b5144 <network_on>

000b52d4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b52d4:	2200      	movs	r2, #0
   b52d6:	6840      	ldr	r0, [r0, #4]
   b52d8:	4611      	mov	r1, r2
   b52da:	f7ff bf2b 	b.w	b5134 <network_ready>

000b52de <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b52de:	2200      	movs	r2, #0
   b52e0:	6840      	ldr	r0, [r0, #4]
   b52e2:	4611      	mov	r1, r2
   b52e4:	f7ff bf16 	b.w	b5114 <network_connecting>

000b52e8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b52e8:	6840      	ldr	r0, [r0, #4]
   b52ea:	2200      	movs	r2, #0
   b52ec:	2102      	movs	r1, #2
   b52ee:	f7ff bf19 	b.w	b5124 <network_disconnect>

000b52f2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b52f2:	2300      	movs	r3, #0
   b52f4:	6840      	ldr	r0, [r0, #4]
   b52f6:	461a      	mov	r2, r3
   b52f8:	f7ff bf04 	b.w	b5104 <network_connect>

000b52fc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b52fc:	4b02      	ldr	r3, [pc, #8]	; (b5308 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b52fe:	2203      	movs	r2, #3
   b5300:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5302:	4a02      	ldr	r2, [pc, #8]	; (b530c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5304:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5306:	4770      	bx	lr
   b5308:	2003e648 	.word	0x2003e648
   b530c:	000b7030 	.word	0x000b7030

000b5310 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5310:	4770      	bx	lr

000b5312 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5314:	4606      	mov	r6, r0
   b5316:	4615      	mov	r5, r2
   b5318:	460c      	mov	r4, r1
   b531a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b531c:	42bc      	cmp	r4, r7
   b531e:	d006      	beq.n	b532e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5320:	6833      	ldr	r3, [r6, #0]
   b5322:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5326:	689b      	ldr	r3, [r3, #8]
   b5328:	4630      	mov	r0, r6
   b532a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b532c:	e7f6      	b.n	b531c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b532e:	4628      	mov	r0, r5
   b5330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5332 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5332:	7c00      	ldrb	r0, [r0, #16]
   b5334:	2200      	movs	r2, #0
   b5336:	f7ff bd69 	b.w	b4e0c <hal_i2c_write>

000b533a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b533a:	7c00      	ldrb	r0, [r0, #16]
   b533c:	2100      	movs	r1, #0
   b533e:	f7ff bd6d 	b.w	b4e1c <hal_i2c_available>

000b5342 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5342:	7c00      	ldrb	r0, [r0, #16]
   b5344:	2100      	movs	r1, #0
   b5346:	f7ff bd71 	b.w	b4e2c <hal_i2c_read>

000b534a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b534a:	7c00      	ldrb	r0, [r0, #16]
   b534c:	2100      	movs	r1, #0
   b534e:	f7ff bd75 	b.w	b4e3c <hal_i2c_peek>

000b5352 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5352:	7c00      	ldrb	r0, [r0, #16]
   b5354:	2100      	movs	r1, #0
   b5356:	f7ff bd79 	b.w	b4e4c <hal_i2c_flush>

000b535a <_ZN7TwoWireD0Ev>:
   b535a:	b510      	push	{r4, lr}
   b535c:	2114      	movs	r1, #20
   b535e:	4604      	mov	r4, r0
   b5360:	f000 fee3 	bl	b612a <_ZdlPvj>
   b5364:	4620      	mov	r0, r4
   b5366:	bd10      	pop	{r4, pc}

000b5368 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5368:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b536a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b536e:	4604      	mov	r4, r0
   b5370:	4608      	mov	r0, r1
   b5372:	2100      	movs	r1, #0
   b5374:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5378:	4b03      	ldr	r3, [pc, #12]	; (b5388 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b537a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b537c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b537e:	4611      	mov	r1, r2
   b5380:	f7ff fd74 	bl	b4e6c <hal_i2c_init>
}
   b5384:	4620      	mov	r0, r4
   b5386:	bd10      	pop	{r4, pc}
   b5388:	000b706c 	.word	0x000b706c

000b538c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b538c:	2300      	movs	r3, #0
   b538e:	7c00      	ldrb	r0, [r0, #16]
   b5390:	461a      	mov	r2, r3
   b5392:	4619      	mov	r1, r3
   b5394:	f7ff bd22 	b.w	b4ddc <hal_i2c_begin>

000b5398 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5398:	7c00      	ldrb	r0, [r0, #16]
   b539a:	2200      	movs	r2, #0
   b539c:	f7ff bd26 	b.w	b4dec <hal_i2c_begin_transmission>

000b53a0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b53a0:	b2c9      	uxtb	r1, r1
   b53a2:	f7ff bff9 	b.w	b5398 <_ZN7TwoWire17beginTransmissionEh>

000b53a6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b53a6:	7c00      	ldrb	r0, [r0, #16]
   b53a8:	2200      	movs	r2, #0
   b53aa:	f7ff bd27 	b.w	b4dfc <hal_i2c_end_transmission>

000b53ae <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b53ae:	2101      	movs	r1, #1
   b53b0:	f7ff bff9 	b.w	b53a6 <_ZN7TwoWire15endTransmissionEh>

000b53b4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b53b4:	4770      	bx	lr

000b53b6 <_ZN9IPAddressD0Ev>:
   b53b6:	b510      	push	{r4, lr}
   b53b8:	2118      	movs	r1, #24
   b53ba:	4604      	mov	r4, r0
   b53bc:	f000 feb5 	bl	b612a <_ZdlPvj>
   b53c0:	4620      	mov	r0, r4
   b53c2:	bd10      	pop	{r4, pc}

000b53c4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b53c4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b53c6:	7d03      	ldrb	r3, [r0, #20]
   b53c8:	2b06      	cmp	r3, #6
{
   b53ca:	b08d      	sub	sp, #52	; 0x34
   b53cc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b53ce:	f100 0704 	add.w	r7, r0, #4
   b53d2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b53d6:	d012      	beq.n	b53fe <_ZNK9IPAddress7printToER5Print+0x3a>
   b53d8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b53dc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b53e0:	220a      	movs	r2, #10
   b53e2:	4630      	mov	r0, r6
   b53e4:	f000 f959 	bl	b569a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b53e8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b53ea:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b53ec:	d019      	beq.n	b5422 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b53ee:	2c00      	cmp	r4, #0
   b53f0:	d0f4      	beq.n	b53dc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b53f2:	212e      	movs	r1, #46	; 0x2e
   b53f4:	4630      	mov	r0, r6
   b53f6:	f000 f937 	bl	b5668 <_ZN5Print5printEc>
   b53fa:	4404      	add	r4, r0
   b53fc:	e7ee      	b.n	b53dc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b53fe:	232f      	movs	r3, #47	; 0x2f
   b5400:	466a      	mov	r2, sp
   b5402:	4639      	mov	r1, r7
   b5404:	200a      	movs	r0, #10
		buf[0] = 0;
   b5406:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b540a:	f7ff fd37 	bl	b4e7c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b540e:	4668      	mov	r0, sp
   b5410:	f001 fb32 	bl	b6a78 <strlen>
   b5414:	6833      	ldr	r3, [r6, #0]
   b5416:	4602      	mov	r2, r0
   b5418:	68db      	ldr	r3, [r3, #12]
   b541a:	4669      	mov	r1, sp
   b541c:	4630      	mov	r0, r6
   b541e:	4798      	blx	r3
   b5420:	4604      	mov	r4, r0
    }
    return n;
}
   b5422:	4620      	mov	r0, r4
   b5424:	b00d      	add	sp, #52	; 0x34
   b5426:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5428 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5428:	b510      	push	{r4, lr}
   b542a:	4b05      	ldr	r3, [pc, #20]	; (b5440 <_ZN9IPAddressC1Ev+0x18>)
   b542c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b542e:	2211      	movs	r2, #17
   b5430:	f840 3b04 	str.w	r3, [r0], #4
   b5434:	2100      	movs	r1, #0
   b5436:	f001 fae1 	bl	b69fc <memset>
}
   b543a:	4620      	mov	r0, r4
   b543c:	bd10      	pop	{r4, pc}
   b543e:	bf00      	nop
   b5440:	000b7094 	.word	0x000b7094

000b5444 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5444:	4603      	mov	r3, r0
   b5446:	4a07      	ldr	r2, [pc, #28]	; (b5464 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5448:	b510      	push	{r4, lr}
   b544a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b544e:	f101 0210 	add.w	r2, r1, #16
   b5452:	f851 4b04 	ldr.w	r4, [r1], #4
   b5456:	f843 4b04 	str.w	r4, [r3], #4
   b545a:	4291      	cmp	r1, r2
   b545c:	d1f9      	bne.n	b5452 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b545e:	780a      	ldrb	r2, [r1, #0]
   b5460:	701a      	strb	r2, [r3, #0]
}
   b5462:	bd10      	pop	{r4, pc}
   b5464:	000b7094 	.word	0x000b7094

000b5468 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5468:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b546a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b546e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5472:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5476:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b547a:	2304      	movs	r3, #4
   b547c:	6041      	str	r1, [r0, #4]
   b547e:	7503      	strb	r3, [r0, #20]
}
   b5480:	bd10      	pop	{r4, pc}
	...

000b5484 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5484:	b507      	push	{r0, r1, r2, lr}
   b5486:	4b06      	ldr	r3, [pc, #24]	; (b54a0 <_ZN9IPAddressC1EPKh+0x1c>)
   b5488:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b548a:	78cb      	ldrb	r3, [r1, #3]
   b548c:	9300      	str	r3, [sp, #0]
   b548e:	788b      	ldrb	r3, [r1, #2]
   b5490:	784a      	ldrb	r2, [r1, #1]
   b5492:	7809      	ldrb	r1, [r1, #0]
   b5494:	f7ff ffe8 	bl	b5468 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5498:	b003      	add	sp, #12
   b549a:	f85d fb04 	ldr.w	pc, [sp], #4
   b549e:	bf00      	nop
   b54a0:	000b7094 	.word	0x000b7094

000b54a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b54a4:	4b01      	ldr	r3, [pc, #4]	; (b54ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b54a6:	4a02      	ldr	r2, [pc, #8]	; (b54b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b54a8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b54aa:	4770      	bx	lr
   b54ac:	2003e650 	.word	0x2003e650
   b54b0:	000b70a0 	.word	0x000b70a0

000b54b4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b54b4:	2300      	movs	r3, #0
   b54b6:	6840      	ldr	r0, [r0, #4]
   b54b8:	461a      	mov	r2, r3
   b54ba:	f7ff be23 	b.w	b5104 <network_connect>

000b54be <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b54be:	6840      	ldr	r0, [r0, #4]
   b54c0:	2200      	movs	r2, #0
   b54c2:	2102      	movs	r1, #2
   b54c4:	f7ff be2e 	b.w	b5124 <network_disconnect>

000b54c8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b54c8:	2200      	movs	r2, #0
   b54ca:	6840      	ldr	r0, [r0, #4]
   b54cc:	4611      	mov	r1, r2
   b54ce:	f7ff be21 	b.w	b5114 <network_connecting>

000b54d2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b54d2:	2200      	movs	r2, #0
   b54d4:	6840      	ldr	r0, [r0, #4]
   b54d6:	4611      	mov	r1, r2
   b54d8:	f7ff be2c 	b.w	b5134 <network_ready>

000b54dc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b54dc:	2300      	movs	r3, #0
   b54de:	6840      	ldr	r0, [r0, #4]
   b54e0:	461a      	mov	r2, r3
   b54e2:	4619      	mov	r1, r3
   b54e4:	f7ff be2e 	b.w	b5144 <network_on>

000b54e8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b54e8:	2300      	movs	r3, #0
   b54ea:	6840      	ldr	r0, [r0, #4]
   b54ec:	461a      	mov	r2, r3
   b54ee:	4619      	mov	r1, r3
   b54f0:	f7ff be30 	b.w	b5154 <network_off>

000b54f4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b54f4:	6840      	ldr	r0, [r0, #4]
   b54f6:	2100      	movs	r1, #0
   b54f8:	f7ff be54 	b.w	b51a4 <network_is_on>

000b54fc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b54fc:	6840      	ldr	r0, [r0, #4]
   b54fe:	2100      	movs	r1, #0
   b5500:	f7ff be58 	b.w	b51b4 <network_is_off>

000b5504 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5504:	6840      	ldr	r0, [r0, #4]
   b5506:	2200      	movs	r2, #0
   b5508:	f081 0101 	eor.w	r1, r1, #1
   b550c:	f7ff be2a 	b.w	b5164 <network_listen>

000b5510 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5510:	6840      	ldr	r0, [r0, #4]
   b5512:	2200      	movs	r2, #0
   b5514:	f7ff be36 	b.w	b5184 <network_set_listen_timeout>

000b5518 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5518:	2200      	movs	r2, #0
   b551a:	6840      	ldr	r0, [r0, #4]
   b551c:	4611      	mov	r1, r2
   b551e:	f7ff be39 	b.w	b5194 <network_get_listen_timeout>

000b5522 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5522:	2200      	movs	r2, #0
   b5524:	6840      	ldr	r0, [r0, #4]
   b5526:	4611      	mov	r1, r2
   b5528:	f7ff be24 	b.w	b5174 <network_listening>

000b552c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b552c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5530:	b095      	sub	sp, #84	; 0x54
   b5532:	4614      	mov	r4, r2
   b5534:	460d      	mov	r5, r1
   b5536:	4607      	mov	r7, r0
    IPAddress addr;
   b5538:	f7ff ff76 	bl	b5428 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b553c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b553e:	221c      	movs	r2, #28
   b5540:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5542:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5544:	f001 fa5a 	bl	b69fc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5548:	2340      	movs	r3, #64	; 0x40
   b554a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b554c:	4620      	mov	r0, r4
   b554e:	466b      	mov	r3, sp
   b5550:	aa0c      	add	r2, sp, #48	; 0x30
   b5552:	2100      	movs	r1, #0
   b5554:	f7ff fca2 	bl	b4e9c <netdb_getaddrinfo>
    if (!r) {
   b5558:	4604      	mov	r4, r0
   b555a:	2800      	cmp	r0, #0
   b555c:	d14b      	bne.n	b55f6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b555e:	4602      	mov	r2, r0
   b5560:	2101      	movs	r1, #1
   b5562:	6868      	ldr	r0, [r5, #4]
   b5564:	f7ff fde6 	bl	b5134 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5568:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b556a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b556c:	4622      	mov	r2, r4
   b556e:	6868      	ldr	r0, [r5, #4]
   b5570:	f7ff fde0 	bl	b5134 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5574:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5576:	4681      	mov	r9, r0
        bool ok = false;
   b5578:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b557a:	2e00      	cmp	r6, #0
   b557c:	d03b      	beq.n	b55f6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b557e:	2900      	cmp	r1, #0
   b5580:	d139      	bne.n	b55f6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5582:	6873      	ldr	r3, [r6, #4]
   b5584:	2b02      	cmp	r3, #2
   b5586:	d003      	beq.n	b5590 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5588:	2b0a      	cmp	r3, #10
   b558a:	d011      	beq.n	b55b0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b558c:	69f6      	ldr	r6, [r6, #28]
   b558e:	e7f4      	b.n	b557a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5590:	f1b8 0f00 	cmp.w	r8, #0
   b5594:	d0fa      	beq.n	b558c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5596:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5598:	a806      	add	r0, sp, #24
   b559a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b559c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b559e:	f7ff ff71 	bl	b5484 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b55a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b55a4:	1d3c      	adds	r4, r7, #4
   b55a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b55a8:	682b      	ldr	r3, [r5, #0]
   b55aa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b55ac:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b55ae:	e7ed      	b.n	b558c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b55b0:	f1b9 0f00 	cmp.w	r9, #0
   b55b4:	d0ea      	beq.n	b558c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b55b6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b55b8:	2210      	movs	r2, #16
   b55ba:	a801      	add	r0, sp, #4
   b55bc:	f001 fa1e 	bl	b69fc <memset>
                    a.v = 6;
   b55c0:	2306      	movs	r3, #6
   b55c2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b55c6:	ad01      	add	r5, sp, #4
   b55c8:	f104 0308 	add.w	r3, r4, #8
   b55cc:	3418      	adds	r4, #24
   b55ce:	6818      	ldr	r0, [r3, #0]
   b55d0:	6859      	ldr	r1, [r3, #4]
   b55d2:	462a      	mov	r2, r5
   b55d4:	c203      	stmia	r2!, {r0, r1}
   b55d6:	3308      	adds	r3, #8
   b55d8:	42a3      	cmp	r3, r4
   b55da:	4615      	mov	r5, r2
   b55dc:	d1f7      	bne.n	b55ce <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b55de:	a901      	add	r1, sp, #4
   b55e0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b55e2:	ad07      	add	r5, sp, #28
   b55e4:	f7ff ff2e 	bl	b5444 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b55e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b55ea:	1d3c      	adds	r4, r7, #4
   b55ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b55ee:	682b      	ldr	r3, [r5, #0]
   b55f0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b55f2:	4649      	mov	r1, r9
   b55f4:	e7ca      	b.n	b558c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b55f6:	9800      	ldr	r0, [sp, #0]
   b55f8:	f7ff fc48 	bl	b4e8c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b55fc:	4638      	mov	r0, r7
   b55fe:	b015      	add	sp, #84	; 0x54
   b5600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5604 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5604:	4b02      	ldr	r3, [pc, #8]	; (b5610 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5606:	4a03      	ldr	r2, [pc, #12]	; (b5614 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5608:	601a      	str	r2, [r3, #0]
   b560a:	2200      	movs	r2, #0
   b560c:	605a      	str	r2, [r3, #4]

} // spark
   b560e:	4770      	bx	lr
   b5610:	2003e654 	.word	0x2003e654
   b5614:	000b70ac 	.word	0x000b70ac

000b5618 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b561a:	4606      	mov	r6, r0
   b561c:	460d      	mov	r5, r1
  size_t n = 0;
   b561e:	188f      	adds	r7, r1, r2
   b5620:	2400      	movs	r4, #0
  while (size--) {
   b5622:	42bd      	cmp	r5, r7
   b5624:	d00c      	beq.n	b5640 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5626:	6833      	ldr	r3, [r6, #0]
   b5628:	f815 1b01 	ldrb.w	r1, [r5], #1
   b562c:	689b      	ldr	r3, [r3, #8]
   b562e:	4630      	mov	r0, r6
   b5630:	4798      	blx	r3
     if (chunk>=0)
   b5632:	1e03      	subs	r3, r0, #0
   b5634:	db01      	blt.n	b563a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5636:	441c      	add	r4, r3
  while (size--) {
   b5638:	e7f3      	b.n	b5622 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b563a:	2c00      	cmp	r4, #0
   b563c:	bf08      	it	eq
   b563e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5640:	4620      	mov	r0, r4
   b5642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5644 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5644:	b513      	push	{r0, r1, r4, lr}
   b5646:	4604      	mov	r4, r0
    }
   b5648:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b564a:	b159      	cbz	r1, b5664 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b564c:	9101      	str	r1, [sp, #4]
   b564e:	f001 fa13 	bl	b6a78 <strlen>
   b5652:	6823      	ldr	r3, [r4, #0]
   b5654:	9901      	ldr	r1, [sp, #4]
   b5656:	68db      	ldr	r3, [r3, #12]
   b5658:	4602      	mov	r2, r0
   b565a:	4620      	mov	r0, r4
    }
   b565c:	b002      	add	sp, #8
   b565e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5662:	4718      	bx	r3
    }
   b5664:	b002      	add	sp, #8
   b5666:	bd10      	pop	{r4, pc}

000b5668 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5668:	6803      	ldr	r3, [r0, #0]
   b566a:	689b      	ldr	r3, [r3, #8]
   b566c:	4718      	bx	r3

000b566e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b566e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5670:	210d      	movs	r1, #13
{
   b5672:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5674:	f7ff fff8 	bl	b5668 <_ZN5Print5printEc>
  n += print('\n');
   b5678:	210a      	movs	r1, #10
  size_t n = print('\r');
   b567a:	4604      	mov	r4, r0
  n += print('\n');
   b567c:	4628      	mov	r0, r5
   b567e:	f7ff fff3 	bl	b5668 <_ZN5Print5printEc>
  return n;
}
   b5682:	4420      	add	r0, r4
   b5684:	bd38      	pop	{r3, r4, r5, pc}

000b5686 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5686:	b538      	push	{r3, r4, r5, lr}
   b5688:	4605      	mov	r5, r0
  return write(str);
   b568a:	f7ff ffdb 	bl	b5644 <_ZN5Print5writeEPKc>
   b568e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5690:	4628      	mov	r0, r5
   b5692:	f7ff ffec 	bl	b566e <_ZN5Print7printlnEv>
  return n;
}
   b5696:	4420      	add	r0, r4
   b5698:	bd38      	pop	{r3, r4, r5, pc}

000b569a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b569a:	b530      	push	{r4, r5, lr}
   b569c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b569e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b56a0:	2a01      	cmp	r2, #1
  *str = '\0';
   b56a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b56a6:	bf98      	it	ls
   b56a8:	220a      	movls	r2, #10
   b56aa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b56ac:	460d      	mov	r5, r1
   b56ae:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b56b2:	fb01 5312 	mls	r3, r1, r2, r5
   b56b6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b56ba:	2b09      	cmp	r3, #9
   b56bc:	bf94      	ite	ls
   b56be:	3330      	addls	r3, #48	; 0x30
   b56c0:	3337      	addhi	r3, #55	; 0x37
   b56c2:	b2db      	uxtb	r3, r3
  } while(n);
   b56c4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b56c6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b56ca:	d9ef      	bls.n	b56ac <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b56cc:	4621      	mov	r1, r4
   b56ce:	f7ff ffb9 	bl	b5644 <_ZN5Print5writeEPKc>
}
   b56d2:	b00b      	add	sp, #44	; 0x2c
   b56d4:	bd30      	pop	{r4, r5, pc}

000b56d6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b56d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b56da:	b086      	sub	sp, #24
   b56dc:	af00      	add	r7, sp, #0
   b56de:	4605      	mov	r5, r0
   b56e0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b56e2:	1d38      	adds	r0, r7, #4
   b56e4:	2114      	movs	r1, #20
{
   b56e6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b56e8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b56ea:	f7ff fd8b 	bl	b5204 <vsnprintf>

    if (n<bufsize)
   b56ee:	2813      	cmp	r0, #19
   b56f0:	d80e      	bhi.n	b5710 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b56f2:	1d39      	adds	r1, r7, #4
   b56f4:	4628      	mov	r0, r5
   b56f6:	f7ff ffa5 	bl	b5644 <_ZN5Print5writeEPKc>
   b56fa:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b56fc:	b11e      	cbz	r6, b5706 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b56fe:	4628      	mov	r0, r5
   b5700:	f7ff ffb5 	bl	b566e <_ZN5Print7printlnEv>
   b5704:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5706:	4620      	mov	r0, r4
   b5708:	3718      	adds	r7, #24
   b570a:	46bd      	mov	sp, r7
   b570c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5710:	f100 0308 	add.w	r3, r0, #8
   b5714:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5718:	46e8      	mov	r8, sp
        char bigger[n+1];
   b571a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b571e:	4622      	mov	r2, r4
   b5720:	1c41      	adds	r1, r0, #1
   b5722:	683b      	ldr	r3, [r7, #0]
   b5724:	4668      	mov	r0, sp
   b5726:	f7ff fd6d 	bl	b5204 <vsnprintf>
  return write(str);
   b572a:	4669      	mov	r1, sp
   b572c:	4628      	mov	r0, r5
   b572e:	f7ff ff89 	bl	b5644 <_ZN5Print5writeEPKc>
   b5732:	4604      	mov	r4, r0
   b5734:	46c5      	mov	sp, r8
   b5736:	e7e1      	b.n	b56fc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5738 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   b5738:	b510      	push	{r4, lr}
   b573a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b573c:	f7ff fd8d 	bl	b525a <_ZNSt14_Function_baseD1Ev>
   b5740:	4620      	mov	r0, r4
   b5742:	bd10      	pop	{r4, pc}

000b5744 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5744:	4803      	ldr	r0, [pc, #12]	; (b5754 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   b5746:	4a04      	ldr	r2, [pc, #16]	; (b5758 <_GLOBAL__sub_I_RGB+0x14>)
   b5748:	4904      	ldr	r1, [pc, #16]	; (b575c <_GLOBAL__sub_I_RGB+0x18>)
   b574a:	2300      	movs	r3, #0
   b574c:	6083      	str	r3, [r0, #8]
   b574e:	f000 bce7 	b.w	b6120 <__aeabi_atexit>
   b5752:	bf00      	nop
   b5754:	2003e65c 	.word	0x2003e65c
   b5758:	2003e5e0 	.word	0x2003e5e0
   b575c:	000b5739 	.word	0x000b5739

000b5760 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5760:	2100      	movs	r1, #0
   b5762:	f7ff bbeb 	b.w	b4f3c <hal_spi_release>

000b5766 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5766:	2100      	movs	r1, #0
   b5768:	f7ff bbe0 	b.w	b4f2c <hal_spi_acquire>

000b576c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b576c:	b510      	push	{r4, lr}
   b576e:	4604      	mov	r4, r0
   b5770:	4608      	mov	r0, r1
{
    _spi = spi;
   b5772:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5774:	f7ff fbc2 	bl	b4efc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5778:	2300      	movs	r3, #0
   b577a:	6063      	str	r3, [r4, #4]
}
   b577c:	4620      	mov	r0, r4
   b577e:	bd10      	pop	{r4, pc}

000b5780 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5780:	b513      	push	{r0, r1, r4, lr}
   b5782:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5784:	7800      	ldrb	r0, [r0, #0]
   b5786:	f7ff ffee 	bl	b5766 <_ZN8SPIClass4lockEv.isra.0>
   b578a:	b958      	cbnz	r0, b57a4 <_ZN8SPIClass5beginEv+0x24>
   b578c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b578e:	9001      	str	r0, [sp, #4]
   b5790:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5794:	f7ff fb8a 	bl	b4eac <hal_spi_begin>
        unlock();
   b5798:	9801      	ldr	r0, [sp, #4]
    }
}
   b579a:	b002      	add	sp, #8
   b579c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b57a0:	f7ff bfde 	b.w	b5760 <_ZN8SPIClass6unlockEv.isra.0>
   b57a4:	b002      	add	sp, #8
   b57a6:	bd10      	pop	{r4, pc}

000b57a8 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b57a8:	b513      	push	{r0, r1, r4, lr}
   b57aa:	4604      	mov	r4, r0
    if (!lock())
   b57ac:	7800      	ldrb	r0, [r0, #0]
{
   b57ae:	9101      	str	r1, [sp, #4]
    if (!lock())
   b57b0:	f7ff ffd9 	bl	b5766 <_ZN8SPIClass4lockEv.isra.0>
   b57b4:	9901      	ldr	r1, [sp, #4]
   b57b6:	b948      	cbnz	r0, b57cc <_ZN8SPIClass11setBitOrderEh+0x24>
   b57b8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b57ba:	9001      	str	r0, [sp, #4]
   b57bc:	f7ff fb7e 	bl	b4ebc <hal_spi_set_bit_order>
        unlock();
   b57c0:	9801      	ldr	r0, [sp, #4]
    }
}
   b57c2:	b002      	add	sp, #8
   b57c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b57c8:	f7ff bfca 	b.w	b5760 <_ZN8SPIClass6unlockEv.isra.0>
   b57cc:	b002      	add	sp, #8
   b57ce:	bd10      	pop	{r4, pc}

000b57d0 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b57d0:	b513      	push	{r0, r1, r4, lr}
   b57d2:	4604      	mov	r4, r0
    if (!lock())
   b57d4:	7800      	ldrb	r0, [r0, #0]
{
   b57d6:	9101      	str	r1, [sp, #4]
    if (!lock())
   b57d8:	f7ff ffc5 	bl	b5766 <_ZN8SPIClass4lockEv.isra.0>
   b57dc:	9901      	ldr	r1, [sp, #4]
   b57de:	b948      	cbnz	r0, b57f4 <_ZN8SPIClass11setDataModeEh+0x24>
   b57e0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b57e2:	9001      	str	r0, [sp, #4]
   b57e4:	f7ff fb72 	bl	b4ecc <hal_spi_set_data_mode>
        unlock();
   b57e8:	9801      	ldr	r0, [sp, #4]
    }
}
   b57ea:	b002      	add	sp, #8
   b57ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b57f0:	f7ff bfb6 	b.w	b5760 <_ZN8SPIClass6unlockEv.isra.0>
   b57f4:	b002      	add	sp, #8
   b57f6:	bd10      	pop	{r4, pc}

000b57f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b57f8:	0840      	lsrs	r0, r0, #1
{
   b57fa:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b57fc:	6018      	str	r0, [r3, #0]
   b57fe:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5800:	6818      	ldr	r0, [r3, #0]
   b5802:	4288      	cmp	r0, r1
   b5804:	b2e5      	uxtb	r5, r4
   b5806:	d906      	bls.n	b5816 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5808:	3401      	adds	r4, #1
   b580a:	2c08      	cmp	r4, #8
   b580c:	d002      	beq.n	b5814 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b580e:	0840      	lsrs	r0, r0, #1
   b5810:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5812:	e7f5      	b.n	b5800 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5814:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5816:	4b02      	ldr	r3, [pc, #8]	; (b5820 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5818:	5d5b      	ldrb	r3, [r3, r5]
   b581a:	7013      	strb	r3, [r2, #0]
}
   b581c:	bd30      	pop	{r4, r5, pc}
   b581e:	bf00      	nop
   b5820:	000b70e0 	.word	0x000b70e0

000b5824 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b5824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5828:	b088      	sub	sp, #32
    unsigned clock = 0;
   b582a:	2300      	movs	r3, #0
{
   b582c:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b582e:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b5830:	9302      	str	r3, [sp, #8]
{
   b5832:	460e      	mov	r6, r1
   b5834:	4617      	mov	r7, r2
    if (!lock())
   b5836:	f7ff ff96 	bl	b5766 <_ZN8SPIClass4lockEv.isra.0>
   b583a:	4605      	mov	r5, r0
   b583c:	bb00      	cbnz	r0, b5880 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b583e:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5842:	4601      	mov	r1, r0
   b5844:	2214      	movs	r2, #20
   b5846:	a803      	add	r0, sp, #12
   b5848:	f001 f8d8 	bl	b69fc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b584c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b584e:	462a      	mov	r2, r5
   b5850:	a903      	add	r1, sp, #12
   b5852:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b5854:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b5858:	f7ff fb60 	bl	b4f1c <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b585c:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b585e:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b5862:	ab02      	add	r3, sp, #8
   b5864:	f10d 0207 	add.w	r2, sp, #7
   b5868:	fb07 f106 	mul.w	r1, r7, r6
   b586c:	f7ff ffc4 	bl	b57f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b5870:	7820      	ldrb	r0, [r4, #0]
   b5872:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b5876:	f7ff fb31 	bl	b4edc <hal_spi_set_clock_divider>
        unlock();
   b587a:	7820      	ldrb	r0, [r4, #0]
   b587c:	f7ff ff70 	bl	b5760 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b5880:	9802      	ldr	r0, [sp, #8]
   b5882:	b008      	add	sp, #32
   b5884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5888 <_ZN8SPIClass15setClockDividerEh>:
{
   b5888:	b538      	push	{r3, r4, r5, lr}
   b588a:	4604      	mov	r4, r0
    if (!lock())
   b588c:	7800      	ldrb	r0, [r0, #0]
{
   b588e:	460d      	mov	r5, r1
    if (!lock())
   b5890:	f7ff ff69 	bl	b5766 <_ZN8SPIClass4lockEv.isra.0>
   b5894:	4603      	mov	r3, r0
   b5896:	b9d0      	cbnz	r0, b58ce <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b5898:	6861      	ldr	r1, [r4, #4]
   b589a:	b199      	cbz	r1, b58c4 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b589c:	4a0c      	ldr	r2, [pc, #48]	; (b58d0 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b589e:	f812 0b01 	ldrb.w	r0, [r2], #1
   b58a2:	4285      	cmp	r5, r0
   b58a4:	d002      	beq.n	b58ac <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b58a6:	3301      	adds	r3, #1
   b58a8:	2b08      	cmp	r3, #8
   b58aa:	d1f8      	bne.n	b589e <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b58ac:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b58ae:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b58b0:	2201      	movs	r2, #1
   b58b2:	40d9      	lsrs	r1, r3
   b58b4:	4620      	mov	r0, r4
   b58b6:	f7ff ffb5 	bl	b5824 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b58ba:	7820      	ldrb	r0, [r4, #0]
}
   b58bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b58c0:	f7ff bf4e 	b.w	b5760 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b58c4:	7820      	ldrb	r0, [r4, #0]
   b58c6:	4629      	mov	r1, r5
   b58c8:	f7ff fb08 	bl	b4edc <hal_spi_set_clock_divider>
   b58cc:	e7f5      	b.n	b58ba <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b58ce:	bd38      	pop	{r3, r4, r5, pc}
   b58d0:	000b70e0 	.word	0x000b70e0

000b58d4 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b58d4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b58d6:	7800      	ldrb	r0, [r0, #0]
   b58d8:	f7ff fb08 	bl	b4eec <hal_spi_transfer>
}
   b58dc:	b2c0      	uxtb	r0, r0
   b58de:	bd08      	pop	{r3, pc}

000b58e0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b58e0:	b510      	push	{r4, lr}
   b58e2:	4604      	mov	r4, r0
{
	free(buffer);
   b58e4:	6800      	ldr	r0, [r0, #0]
   b58e6:	f7ff fc75 	bl	b51d4 <free>
}
   b58ea:	4620      	mov	r0, r4
   b58ec:	bd10      	pop	{r4, pc}

000b58ee <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b58ee:	b510      	push	{r4, lr}
   b58f0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b58f2:	6800      	ldr	r0, [r0, #0]
   b58f4:	b108      	cbz	r0, b58fa <_ZN6String10invalidateEv+0xc>
   b58f6:	f7ff fc6d 	bl	b51d4 <free>
	buffer = NULL;
   b58fa:	2300      	movs	r3, #0
	capacity = len = 0;
   b58fc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5900:	6023      	str	r3, [r4, #0]
}
   b5902:	bd10      	pop	{r4, pc}

000b5904 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5904:	b538      	push	{r3, r4, r5, lr}
   b5906:	4604      	mov	r4, r0
   b5908:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b590a:	6800      	ldr	r0, [r0, #0]
   b590c:	3101      	adds	r1, #1
   b590e:	f7ff fc69 	bl	b51e4 <realloc>
	if (newbuffer) {
   b5912:	b110      	cbz	r0, b591a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5914:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5918:	2001      	movs	r0, #1
	}
	return 0;
}
   b591a:	bd38      	pop	{r3, r4, r5, pc}

000b591c <_ZN6String7reserveEj>:
{
   b591c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b591e:	6803      	ldr	r3, [r0, #0]
{
   b5920:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5922:	b123      	cbz	r3, b592e <_ZN6String7reserveEj+0x12>
   b5924:	6843      	ldr	r3, [r0, #4]
   b5926:	428b      	cmp	r3, r1
   b5928:	d301      	bcc.n	b592e <_ZN6String7reserveEj+0x12>
   b592a:	2001      	movs	r0, #1
}
   b592c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b592e:	4620      	mov	r0, r4
   b5930:	f7ff ffe8 	bl	b5904 <_ZN6String12changeBufferEj>
   b5934:	2800      	cmp	r0, #0
   b5936:	d0f9      	beq.n	b592c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5938:	68a3      	ldr	r3, [r4, #8]
   b593a:	2b00      	cmp	r3, #0
   b593c:	d1f5      	bne.n	b592a <_ZN6String7reserveEj+0xe>
   b593e:	6822      	ldr	r2, [r4, #0]
   b5940:	7013      	strb	r3, [r2, #0]
   b5942:	e7f2      	b.n	b592a <_ZN6String7reserveEj+0xe>

000b5944 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5944:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5946:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5948:	4611      	mov	r1, r2
   b594a:	9201      	str	r2, [sp, #4]
{
   b594c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b594e:	f7ff ffe5 	bl	b591c <_ZN6String7reserveEj>
   b5952:	9a01      	ldr	r2, [sp, #4]
   b5954:	b928      	cbnz	r0, b5962 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5956:	4620      	mov	r0, r4
   b5958:	f7ff ffc9 	bl	b58ee <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b595c:	4620      	mov	r0, r4
   b595e:	b003      	add	sp, #12
   b5960:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5962:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5964:	4629      	mov	r1, r5
   b5966:	6820      	ldr	r0, [r4, #0]
   b5968:	f001 f83a 	bl	b69e0 <memcpy>
	buffer[len] = 0;
   b596c:	6822      	ldr	r2, [r4, #0]
   b596e:	68a3      	ldr	r3, [r4, #8]
   b5970:	2100      	movs	r1, #0
   b5972:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5974:	e7f2      	b.n	b595c <_ZN6String4copyEPKcj+0x18>

000b5976 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5976:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5978:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b597a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b597e:	4604      	mov	r4, r0
	len = 0;
   b5980:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5982:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5984:	b141      	cbz	r1, b5998 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5986:	4608      	mov	r0, r1
   b5988:	9101      	str	r1, [sp, #4]
   b598a:	f001 f875 	bl	b6a78 <strlen>
   b598e:	9901      	ldr	r1, [sp, #4]
   b5990:	4602      	mov	r2, r0
   b5992:	4620      	mov	r0, r4
   b5994:	f7ff ffd6 	bl	b5944 <_ZN6String4copyEPKcj>
}
   b5998:	4620      	mov	r0, r4
   b599a:	b002      	add	sp, #8
   b599c:	bd10      	pop	{r4, pc}

000b599e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b599e:	b538      	push	{r3, r4, r5, lr}
   b59a0:	4605      	mov	r5, r0
	if (buffer) {
   b59a2:	6800      	ldr	r0, [r0, #0]
{
   b59a4:	460c      	mov	r4, r1
	if (buffer) {
   b59a6:	b168      	cbz	r0, b59c4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b59a8:	686a      	ldr	r2, [r5, #4]
   b59aa:	688b      	ldr	r3, [r1, #8]
   b59ac:	429a      	cmp	r2, r3
   b59ae:	d307      	bcc.n	b59c0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b59b0:	6809      	ldr	r1, [r1, #0]
   b59b2:	f001 f859 	bl	b6a68 <strcpy>
			len = rhs.len;
   b59b6:	68a3      	ldr	r3, [r4, #8]
   b59b8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b59ba:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b59bc:	60a3      	str	r3, [r4, #8]
}
   b59be:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b59c0:	f7ff fc08 	bl	b51d4 <free>
	buffer = rhs.buffer;
   b59c4:	6823      	ldr	r3, [r4, #0]
   b59c6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b59c8:	6863      	ldr	r3, [r4, #4]
   b59ca:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b59cc:	68a3      	ldr	r3, [r4, #8]
   b59ce:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b59d0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b59d2:	e9c4 3300 	strd	r3, r3, [r4]
   b59d6:	e7f1      	b.n	b59bc <_ZN6String4moveERS_+0x1e>

000b59d8 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b59d8:	4288      	cmp	r0, r1
{
   b59da:	b510      	push	{r4, lr}
   b59dc:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b59de:	d001      	beq.n	b59e4 <_ZN6StringaSEOS_+0xc>
   b59e0:	f7ff ffdd 	bl	b599e <_ZN6String4moveERS_>
	return *this;
}
   b59e4:	4620      	mov	r0, r4
   b59e6:	bd10      	pop	{r4, pc}

000b59e8 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b59e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b59ea:	429a      	cmp	r2, r3
{
   b59ec:	460f      	mov	r7, r1
   b59ee:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b59f0:	490c      	ldr	r1, [pc, #48]	; (b5a24 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b59f2:	bf88      	it	hi
   b59f4:	4613      	movhi	r3, r2
{
   b59f6:	4614      	mov	r4, r2
   b59f8:	4606      	mov	r6, r0
	if (left > right) {
   b59fa:	bf84      	itt	hi
   b59fc:	462c      	movhi	r4, r5
   b59fe:	461d      	movhi	r5, r3
	String out;
   b5a00:	f7ff ffb9 	bl	b5976 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b5a04:	68bb      	ldr	r3, [r7, #8]
   b5a06:	42a3      	cmp	r3, r4
   b5a08:	d30a      	bcc.n	b5a20 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b5a0a:	6839      	ldr	r1, [r7, #0]
   b5a0c:	42ab      	cmp	r3, r5
   b5a0e:	bf94      	ite	ls
   b5a10:	ebc4 0203 	rsbls	r2, r4, r3
   b5a14:	ebc4 0205 	rsbhi	r2, r4, r5
   b5a18:	4421      	add	r1, r4
   b5a1a:	4630      	mov	r0, r6
   b5a1c:	f7ff ff92 	bl	b5944 <_ZN6String4copyEPKcj>
	return out;
}
   b5a20:	4630      	mov	r0, r6
   b5a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5a24:	000b71c0 	.word	0x000b71c0

000b5a28 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   b5a28:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5a2a:	4b09      	ldr	r3, [pc, #36]	; (b5a50 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5a2c:	4c09      	ldr	r4, [pc, #36]	; (b5a54 <_GLOBAL__sub_I_System+0x2c>)
   b5a2e:	2202      	movs	r2, #2
   b5a30:	601a      	str	r2, [r3, #0]
   b5a32:	2000      	movs	r0, #0
    SleepResult() {}
   b5a34:	4b08      	ldr	r3, [pc, #32]	; (b5a58 <_GLOBAL__sub_I_System+0x30>)
   b5a36:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5a38:	e9c4 0000 	strd	r0, r0, [r4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5a3c:	f7ff fb0e 	bl	b505c <set_system_mode>
SystemClass System;
   b5a40:	4620      	mov	r0, r4
   b5a42:	4a06      	ldr	r2, [pc, #24]	; (b5a5c <_GLOBAL__sub_I_System+0x34>)
   b5a44:	4906      	ldr	r1, [pc, #24]	; (b5a60 <_GLOBAL__sub_I_System+0x38>)
   b5a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   b5a4a:	f000 bb69 	b.w	b6120 <__aeabi_atexit>
   b5a4e:	bf00      	nop
   b5a50:	2003e678 	.word	0x2003e678
   b5a54:	2003e66c 	.word	0x2003e66c
   b5a58:	ffff0000 	.word	0xffff0000
   b5a5c:	2003e5e0 	.word	0x2003e5e0
   b5a60:	000b40c3 	.word	0x000b40c3

000b5a64 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b5a64:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5a66:	2000      	movs	r0, #0
   b5a68:	f7ff fb3c 	bl	b50e4 <spark_sync_time_pending>
   b5a6c:	b128      	cbz	r0, b5a7a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5a6e:	f7ff fb29 	bl	b50c4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5a72:	f080 0001 	eor.w	r0, r0, #1
   b5a76:	b2c0      	uxtb	r0, r0
    }
   b5a78:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5a7a:	2001      	movs	r0, #1
   b5a7c:	e7fc      	b.n	b5a78 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b5a80 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b5a80:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b5a84:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b5a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b5a8c:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b5a8e:	d411      	bmi.n	b5ab4 <_ZN9TimeClass4zoneEf+0x34>
   b5a90:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b5a94:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b5a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5a9c:	dc0a      	bgt.n	b5ab4 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b5a9e:	eddf 7a06 	vldr	s15, [pc, #24]	; b5ab8 <_ZN9TimeClass4zoneEf+0x38>
   b5aa2:	ee60 7a27 	vmul.f32	s15, s0, s15
   b5aa6:	ee17 0a90 	vmov	r0, s15
   b5aaa:	f000 ff31 	bl	b6910 <__aeabi_f2lz>
   b5aae:	4b03      	ldr	r3, [pc, #12]	; (b5abc <_ZN9TimeClass4zoneEf+0x3c>)
   b5ab0:	e9c3 0100 	strd	r0, r1, [r3]
}
   b5ab4:	bd08      	pop	{r3, pc}
   b5ab6:	bf00      	nop
   b5ab8:	45610000 	.word	0x45610000
   b5abc:	2003e688 	.word	0x2003e688

000b5ac0 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b5ac0:	b530      	push	{r4, r5, lr}
   b5ac2:	b093      	sub	sp, #76	; 0x4c
   b5ac4:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b5ac8:	4b19      	ldr	r3, [pc, #100]	; (b5b30 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b5aca:	4604      	mov	r4, r0
    t += time_zone_cache;
   b5acc:	e9d3 1000 	ldrd	r1, r0, [r3]
   b5ad0:	9b01      	ldr	r3, [sp, #4]
   b5ad2:	1852      	adds	r2, r2, r1
   b5ad4:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b5ad8:	4816      	ldr	r0, [pc, #88]	; (b5b34 <_ZN9TimeClass7timeStrEx+0x74>)
   b5ada:	e9d0 1000 	ldrd	r1, r0, [r0]
   b5ade:	1852      	adds	r2, r2, r1
   b5ae0:	eb43 0300 	adc.w	r3, r3, r0
   b5ae4:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b5ae8:	2224      	movs	r2, #36	; 0x24
   b5aea:	eb0d 0002 	add.w	r0, sp, r2
   b5aee:	2100      	movs	r1, #0
   b5af0:	f000 ff84 	bl	b69fc <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b5af4:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b5af6:	a909      	add	r1, sp, #36	; 0x24
   b5af8:	4668      	mov	r0, sp
   b5afa:	f7ff fb9b 	bl	b5234 <localtime_r>
    char ascstr[26] = {};
   b5afe:	2216      	movs	r2, #22
   b5b00:	4629      	mov	r1, r5
   b5b02:	a803      	add	r0, sp, #12
   b5b04:	9502      	str	r5, [sp, #8]
   b5b06:	f000 ff79 	bl	b69fc <memset>
    asctime_r(&calendar_time, ascstr);
   b5b0a:	a902      	add	r1, sp, #8
   b5b0c:	a809      	add	r0, sp, #36	; 0x24
   b5b0e:	f000 ff33 	bl	b6978 <asctime_r>
    int len = strlen(ascstr);
   b5b12:	a802      	add	r0, sp, #8
   b5b14:	f000 ffb0 	bl	b6a78 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b5b18:	ab12      	add	r3, sp, #72	; 0x48
   b5b1a:	4418      	add	r0, r3
    return String(ascstr);
   b5b1c:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b5b1e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b5b22:	4620      	mov	r0, r4
   b5b24:	f7ff ff27 	bl	b5976 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5b28:	4620      	mov	r0, r4
   b5b2a:	b013      	add	sp, #76	; 0x4c
   b5b2c:	bd30      	pop	{r4, r5, pc}
   b5b2e:	bf00      	nop
   b5b30:	2003e688 	.word	0x2003e688
   b5b34:	2003e680 	.word	0x2003e680

000b5b38 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b5b38:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b5b3a:	2000      	movs	r0, #0
   b5b3c:	f7ff f91e 	bl	b4d7c <hal_rtc_time_is_valid>
    if (rtcstate)
   b5b40:	4604      	mov	r4, r0
   b5b42:	b9a0      	cbnz	r0, b5b6e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b5b44:	f7ff fa82 	bl	b504c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b5b48:	2801      	cmp	r0, #1
   b5b4a:	d110      	bne.n	b5b6e <_ZN9TimeClass7isValidEv+0x36>
   b5b4c:	4620      	mov	r0, r4
   b5b4e:	f7ff fa95 	bl	b507c <system_thread_get_state>
   b5b52:	b960      	cbnz	r0, b5b6e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b5b54:	f7ff ff86 	bl	b5a64 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b5b58:	b910      	cbnz	r0, b5b60 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b5b5a:	f7ff faab 	bl	b50b4 <spark_process>
        while (_while() && !_condition()) {
   b5b5e:	e7f9      	b.n	b5b54 <_ZN9TimeClass7isValidEv+0x1c>
   b5b60:	f7ff ff80 	bl	b5a64 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b5b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b5b68:	2000      	movs	r0, #0
   b5b6a:	f7ff b907 	b.w	b4d7c <hal_rtc_time_is_valid>
}
   b5b6e:	4620      	mov	r0, r4
   b5b70:	bd10      	pop	{r4, pc}

000b5b72 <_ZN9TimeClass3nowEv>:
{
   b5b72:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b5b74:	f7ff ffe0 	bl	b5b38 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b5b78:	2210      	movs	r2, #16
   b5b7a:	2100      	movs	r1, #0
   b5b7c:	4668      	mov	r0, sp
   b5b7e:	f000 ff3d 	bl	b69fc <memset>
    hal_rtc_get_time(&tv, nullptr);
   b5b82:	2100      	movs	r1, #0
   b5b84:	4668      	mov	r0, sp
   b5b86:	f7ff f901 	bl	b4d8c <hal_rtc_get_time>
}
   b5b8a:	9800      	ldr	r0, [sp, #0]
   b5b8c:	b005      	add	sp, #20
   b5b8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5b94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5b94:	4b02      	ldr	r3, [pc, #8]	; (b5ba0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5b96:	681a      	ldr	r2, [r3, #0]
   b5b98:	4b02      	ldr	r3, [pc, #8]	; (b5ba4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5b9a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5b9c:	4770      	bx	lr
   b5b9e:	bf00      	nop
   b5ba0:	2003e574 	.word	0x2003e574
   b5ba4:	2003e67c 	.word	0x2003e67c

000b5ba8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   b5ba8:	4770      	bx	lr

000b5baa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5baa:	7441      	strb	r1, [r0, #17]
}
   b5bac:	4770      	bx	lr

000b5bae <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5bae:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5bb0:	7c00      	ldrb	r0, [r0, #16]
   b5bb2:	f7ff fa03 	bl	b4fbc <hal_usart_available_data_for_write>
}
   b5bb6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5bba:	bd08      	pop	{r3, pc}

000b5bbc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5bbc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5bbe:	7c00      	ldrb	r0, [r0, #16]
   b5bc0:	f7ff f9d4 	bl	b4f6c <hal_usart_available>
}
   b5bc4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5bc8:	bd08      	pop	{r3, pc}

000b5bca <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5bca:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5bcc:	7c00      	ldrb	r0, [r0, #16]
   b5bce:	f7ff f9dd 	bl	b4f8c <hal_usart_peek>
}
   b5bd2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5bd6:	bd08      	pop	{r3, pc}

000b5bd8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5bd8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5bda:	7c00      	ldrb	r0, [r0, #16]
   b5bdc:	f7ff f9ce 	bl	b4f7c <hal_usart_read>
}
   b5be0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5be4:	bd08      	pop	{r3, pc}

000b5be6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5be6:	7c00      	ldrb	r0, [r0, #16]
   b5be8:	f7ff b9d8 	b.w	b4f9c <hal_usart_flush>

000b5bec <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5bee:	7c45      	ldrb	r5, [r0, #17]
{
   b5bf0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5bf2:	b12d      	cbz	r5, b5c00 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5bf4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5bf6:	b003      	add	sp, #12
   b5bf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5bfc:	f7ff b9ae 	b.w	b4f5c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5c00:	7c00      	ldrb	r0, [r0, #16]
   b5c02:	9101      	str	r1, [sp, #4]
   b5c04:	f7ff f9da 	bl	b4fbc <hal_usart_available_data_for_write>
   b5c08:	2800      	cmp	r0, #0
   b5c0a:	9901      	ldr	r1, [sp, #4]
   b5c0c:	dcf2      	bgt.n	b5bf4 <_ZN11USARTSerial5writeEh+0x8>
}
   b5c0e:	4628      	mov	r0, r5
   b5c10:	b003      	add	sp, #12
   b5c12:	bd30      	pop	{r4, r5, pc}

000b5c14 <_ZN11USARTSerialD0Ev>:
   b5c14:	b510      	push	{r4, lr}
   b5c16:	2114      	movs	r1, #20
   b5c18:	4604      	mov	r4, r0
   b5c1a:	f000 fa86 	bl	b612a <_ZdlPvj>
   b5c1e:	4620      	mov	r0, r4
   b5c20:	bd10      	pop	{r4, pc}
	...

000b5c24 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   b5c24:	b510      	push	{r4, lr}
   b5c26:	f04f 0c00 	mov.w	ip, #0
   b5c2a:	4604      	mov	r4, r0
   b5c2c:	4608      	mov	r0, r1
   b5c2e:	4611      	mov	r1, r2
   b5c30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5c34:	e9c4 c201 	strd	ip, r2, [r4, #4]
   b5c38:	4a04      	ldr	r2, [pc, #16]	; (b5c4c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   b5c3a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   b5c3c:	2201      	movs	r2, #1
  _serial = serial;
   b5c3e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5c40:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   b5c42:	461a      	mov	r2, r3
   b5c44:	f7ff f982 	bl	b4f4c <hal_usart_init>
}
   b5c48:	4620      	mov	r0, r4
   b5c4a:	bd10      	pop	{r4, pc}
   b5c4c:	000b710c 	.word	0x000b710c

000b5c50 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   b5c50:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   b5c52:	4c0e      	ldr	r4, [pc, #56]	; (b5c8c <_Z22__fetch_global_Serial1v+0x3c>)
   b5c54:	7821      	ldrb	r1, [r4, #0]
   b5c56:	f3bf 8f5b 	dmb	ish
   b5c5a:	f011 0101 	ands.w	r1, r1, #1
   b5c5e:	d112      	bne.n	b5c86 <_Z22__fetch_global_Serial1v+0x36>
   b5c60:	4620      	mov	r0, r4
   b5c62:	9101      	str	r1, [sp, #4]
   b5c64:	f7fe fa24 	bl	b40b0 <__cxa_guard_acquire>
   b5c68:	9901      	ldr	r1, [sp, #4]
   b5c6a:	b160      	cbz	r0, b5c86 <_Z22__fetch_global_Serial1v+0x36>
   b5c6c:	4a08      	ldr	r2, [pc, #32]	; (b5c90 <_Z22__fetch_global_Serial1v+0x40>)
   b5c6e:	4b09      	ldr	r3, [pc, #36]	; (b5c94 <_Z22__fetch_global_Serial1v+0x44>)
   b5c70:	4809      	ldr	r0, [pc, #36]	; (b5c98 <_Z22__fetch_global_Serial1v+0x48>)
   b5c72:	f7ff ffd7 	bl	b5c24 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   b5c76:	4620      	mov	r0, r4
   b5c78:	f7fe fa1f 	bl	b40ba <__cxa_guard_release>
   b5c7c:	4a07      	ldr	r2, [pc, #28]	; (b5c9c <_Z22__fetch_global_Serial1v+0x4c>)
   b5c7e:	4908      	ldr	r1, [pc, #32]	; (b5ca0 <_Z22__fetch_global_Serial1v+0x50>)
   b5c80:	4805      	ldr	r0, [pc, #20]	; (b5c98 <_Z22__fetch_global_Serial1v+0x48>)
   b5c82:	f000 fa4d 	bl	b6120 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   b5c86:	4804      	ldr	r0, [pc, #16]	; (b5c98 <_Z22__fetch_global_Serial1v+0x48>)
   b5c88:	b002      	add	sp, #8
   b5c8a:	bd10      	pop	{r4, pc}
   b5c8c:	2003e690 	.word	0x2003e690
   b5c90:	2003e694 	.word	0x2003e694
   b5c94:	2003e718 	.word	0x2003e718
   b5c98:	2003e79c 	.word	0x2003e79c
   b5c9c:	2003e5e0 	.word	0x2003e5e0
   b5ca0:	000b5ba9 	.word	0x000b5ba9

000b5ca4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5ca4:	7441      	strb	r1, [r0, #17]
}
   b5ca6:	4770      	bx	lr

000b5ca8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5ca8:	4770      	bx	lr

000b5caa <_ZN9USBSerial4readEv>:
{
   b5caa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5cac:	2100      	movs	r1, #0
   b5cae:	7c00      	ldrb	r0, [r0, #16]
   b5cb0:	f7ff f9ac 	bl	b500c <HAL_USB_USART_Receive_Data>
}
   b5cb4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5cb8:	bd08      	pop	{r3, pc}

000b5cba <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   b5cba:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5cbc:	2101      	movs	r1, #1
   b5cbe:	7c00      	ldrb	r0, [r0, #16]
   b5cc0:	f7ff f9a4 	bl	b500c <HAL_USB_USART_Receive_Data>
}
   b5cc4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5cc8:	bd08      	pop	{r3, pc}

000b5cca <_ZN9USBSerial17availableForWriteEv>:
{
   b5cca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5ccc:	7c00      	ldrb	r0, [r0, #16]
   b5cce:	f7ff f995 	bl	b4ffc <HAL_USB_USART_Available_Data_For_Write>
}
   b5cd2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5cd6:	bd08      	pop	{r3, pc}

000b5cd8 <_ZN9USBSerial9availableEv>:
{
   b5cd8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5cda:	7c00      	ldrb	r0, [r0, #16]
   b5cdc:	f7ff f986 	bl	b4fec <HAL_USB_USART_Available_Data>
}
   b5ce0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ce4:	bd08      	pop	{r3, pc}

000b5ce6 <_ZN9USBSerial5writeEh>:
{
   b5ce6:	b513      	push	{r0, r1, r4, lr}
   b5ce8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5cea:	7c00      	ldrb	r0, [r0, #16]
{
   b5cec:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5cee:	f7ff f985 	bl	b4ffc <HAL_USB_USART_Available_Data_For_Write>
   b5cf2:	2800      	cmp	r0, #0
   b5cf4:	9901      	ldr	r1, [sp, #4]
   b5cf6:	dc01      	bgt.n	b5cfc <_ZN9USBSerial5writeEh+0x16>
   b5cf8:	7c60      	ldrb	r0, [r4, #17]
   b5cfa:	b120      	cbz	r0, b5d06 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5cfc:	7c20      	ldrb	r0, [r4, #16]
   b5cfe:	f7ff f98d 	bl	b501c <HAL_USB_USART_Send_Data>
   b5d02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5d06:	b002      	add	sp, #8
   b5d08:	bd10      	pop	{r4, pc}

000b5d0a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5d0a:	7c00      	ldrb	r0, [r0, #16]
   b5d0c:	f7ff b98e 	b.w	b502c <HAL_USB_USART_Flush_Data>

000b5d10 <_ZN9USBSerialD0Ev>:
   b5d10:	b510      	push	{r4, lr}
   b5d12:	2114      	movs	r1, #20
   b5d14:	4604      	mov	r4, r0
   b5d16:	f000 fa08 	bl	b612a <_ZdlPvj>
   b5d1a:	4620      	mov	r0, r4
   b5d1c:	bd10      	pop	{r4, pc}
	...

000b5d20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5d20:	b510      	push	{r4, lr}
   b5d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5d26:	4604      	mov	r4, r0
   b5d28:	4608      	mov	r0, r1
   b5d2a:	2100      	movs	r1, #0
   b5d2c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5d30:	4b04      	ldr	r3, [pc, #16]	; (b5d44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5d32:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5d34:	2301      	movs	r3, #1
  _serial = serial;
   b5d36:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5d38:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5d3a:	4611      	mov	r1, r2
   b5d3c:	f7ff f946 	bl	b4fcc <HAL_USB_USART_Init>
}
   b5d40:	4620      	mov	r0, r4
   b5d42:	bd10      	pop	{r4, pc}
   b5d44:	000b713c 	.word	0x000b713c

000b5d48 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5d48:	7c00      	ldrb	r0, [r0, #16]
   b5d4a:	2200      	movs	r2, #0
   b5d4c:	f7ff b946 	b.w	b4fdc <HAL_USB_USART_Begin>

000b5d50 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   b5d50:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   b5d52:	2214      	movs	r2, #20
{
   b5d54:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   b5d56:	2100      	movs	r1, #0
   b5d58:	f000 fe50 	bl	b69fc <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   b5d5c:	4620      	mov	r0, r4
   b5d5e:	bd10      	pop	{r4, pc}

000b5d60 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   b5d60:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5d62:	4c10      	ldr	r4, [pc, #64]	; (b5da4 <_Z16_fetch_usbserialv+0x44>)
{
   b5d64:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5d66:	a803      	add	r0, sp, #12
   b5d68:	f7ff fff2 	bl	b5d50 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5d6c:	7821      	ldrb	r1, [r4, #0]
   b5d6e:	f3bf 8f5b 	dmb	ish
   b5d72:	f011 0101 	ands.w	r1, r1, #1
   b5d76:	d111      	bne.n	b5d9c <_Z16_fetch_usbserialv+0x3c>
   b5d78:	4620      	mov	r0, r4
   b5d7a:	9101      	str	r1, [sp, #4]
   b5d7c:	f7fe f998 	bl	b40b0 <__cxa_guard_acquire>
   b5d80:	9901      	ldr	r1, [sp, #4]
   b5d82:	b158      	cbz	r0, b5d9c <_Z16_fetch_usbserialv+0x3c>
   b5d84:	aa03      	add	r2, sp, #12
   b5d86:	4808      	ldr	r0, [pc, #32]	; (b5da8 <_Z16_fetch_usbserialv+0x48>)
   b5d88:	f7ff ffca 	bl	b5d20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5d8c:	4620      	mov	r0, r4
   b5d8e:	f7fe f994 	bl	b40ba <__cxa_guard_release>
   b5d92:	4a06      	ldr	r2, [pc, #24]	; (b5dac <_Z16_fetch_usbserialv+0x4c>)
   b5d94:	4906      	ldr	r1, [pc, #24]	; (b5db0 <_Z16_fetch_usbserialv+0x50>)
   b5d96:	4804      	ldr	r0, [pc, #16]	; (b5da8 <_Z16_fetch_usbserialv+0x48>)
   b5d98:	f000 f9c2 	bl	b6120 <__aeabi_atexit>
	return _usbserial;
}
   b5d9c:	4802      	ldr	r0, [pc, #8]	; (b5da8 <_Z16_fetch_usbserialv+0x48>)
   b5d9e:	b008      	add	sp, #32
   b5da0:	bd10      	pop	{r4, pc}
   b5da2:	bf00      	nop
   b5da4:	2003e7b0 	.word	0x2003e7b0
   b5da8:	2003e7b4 	.word	0x2003e7b4
   b5dac:	2003e5e0 	.word	0x2003e5e0
   b5db0:	000b5ca9 	.word	0x000b5ca9

000b5db4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5db4:	2200      	movs	r2, #0
   b5db6:	6840      	ldr	r0, [r0, #4]
   b5db8:	4611      	mov	r1, r2
   b5dba:	f7ff b9bb 	b.w	b5134 <network_ready>

000b5dbe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5dbe:	2200      	movs	r2, #0
   b5dc0:	6840      	ldr	r0, [r0, #4]
   b5dc2:	4611      	mov	r1, r2
   b5dc4:	f7ff b9d6 	b.w	b5174 <network_listening>

000b5dc8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5dc8:	2200      	movs	r2, #0
   b5dca:	6840      	ldr	r0, [r0, #4]
   b5dcc:	4611      	mov	r1, r2
   b5dce:	f7ff b9e1 	b.w	b5194 <network_get_listen_timeout>

000b5dd2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5dd2:	6840      	ldr	r0, [r0, #4]
   b5dd4:	2200      	movs	r2, #0
   b5dd6:	f7ff b9d5 	b.w	b5184 <network_set_listen_timeout>

000b5dda <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5dda:	6840      	ldr	r0, [r0, #4]
   b5ddc:	2200      	movs	r2, #0
   b5dde:	f081 0101 	eor.w	r1, r1, #1
   b5de2:	f7ff b9bf 	b.w	b5164 <network_listen>

000b5de6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5de6:	2300      	movs	r3, #0
   b5de8:	6840      	ldr	r0, [r0, #4]
   b5dea:	461a      	mov	r2, r3
   b5dec:	4619      	mov	r1, r3
   b5dee:	f7ff b9b1 	b.w	b5154 <network_off>

000b5df2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5df2:	2300      	movs	r3, #0
   b5df4:	6840      	ldr	r0, [r0, #4]
   b5df6:	461a      	mov	r2, r3
   b5df8:	4619      	mov	r1, r3
   b5dfa:	f7ff b9a3 	b.w	b5144 <network_on>

000b5dfe <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5dfe:	2200      	movs	r2, #0
   b5e00:	6840      	ldr	r0, [r0, #4]
   b5e02:	4611      	mov	r1, r2
   b5e04:	f7ff b986 	b.w	b5114 <network_connecting>

000b5e08 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5e08:	6840      	ldr	r0, [r0, #4]
   b5e0a:	2200      	movs	r2, #0
   b5e0c:	2102      	movs	r1, #2
   b5e0e:	f7ff b989 	b.w	b5124 <network_disconnect>

000b5e12 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5e12:	2300      	movs	r3, #0
   b5e14:	6840      	ldr	r0, [r0, #4]
   b5e16:	461a      	mov	r2, r3
   b5e18:	f7ff b974 	b.w	b5104 <network_connect>

000b5e1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5e1c:	4b02      	ldr	r3, [pc, #8]	; (b5e28 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5e1e:	2204      	movs	r2, #4
   b5e20:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5e22:	4a02      	ldr	r2, [pc, #8]	; (b5e2c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5e24:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5e26:	4770      	bx	lr
   b5e28:	2003e7c8 	.word	0x2003e7c8
   b5e2c:	000b716c 	.word	0x000b716c

000b5e30 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5e30:	4b01      	ldr	r3, [pc, #4]	; (b5e38 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5e32:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5e34:	4770      	bx	lr
   b5e36:	bf00      	nop
   b5e38:	2003e578 	.word	0x2003e578

000b5e3c <serialEventRun>:
{
   b5e3c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5e3e:	4b0b      	ldr	r3, [pc, #44]	; (b5e6c <serialEventRun+0x30>)
   b5e40:	b143      	cbz	r3, b5e54 <serialEventRun+0x18>
   b5e42:	f7ff ff8d 	bl	b5d60 <_Z16_fetch_usbserialv>
   b5e46:	6803      	ldr	r3, [r0, #0]
   b5e48:	691b      	ldr	r3, [r3, #16]
   b5e4a:	4798      	blx	r3
   b5e4c:	2800      	cmp	r0, #0
   b5e4e:	dd01      	ble.n	b5e54 <serialEventRun+0x18>
        serialEvent();
   b5e50:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5e54:	4b06      	ldr	r3, [pc, #24]	; (b5e70 <serialEventRun+0x34>)
   b5e56:	b143      	cbz	r3, b5e6a <serialEventRun+0x2e>
   b5e58:	f7ff fefa 	bl	b5c50 <_Z22__fetch_global_Serial1v>
   b5e5c:	6803      	ldr	r3, [r0, #0]
   b5e5e:	691b      	ldr	r3, [r3, #16]
   b5e60:	4798      	blx	r3
   b5e62:	2800      	cmp	r0, #0
   b5e64:	dd01      	ble.n	b5e6a <serialEventRun+0x2e>
        serialEvent1();
   b5e66:	f3af 8000 	nop.w
}
   b5e6a:	bd08      	pop	{r3, pc}
	...

000b5e74 <_post_loop>:
{
   b5e74:	b508      	push	{r3, lr}
	serialEventRun();
   b5e76:	f7ff ffe1 	bl	b5e3c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5e7a:	f7fe ff77 	bl	b4d6c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5e7e:	4b01      	ldr	r3, [pc, #4]	; (b5e84 <_post_loop+0x10>)
   b5e80:	6018      	str	r0, [r3, #0]
}
   b5e82:	bd08      	pop	{r3, pc}
   b5e84:	2003e7d8 	.word	0x2003e7d8

000b5e88 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5e88:	4805      	ldr	r0, [pc, #20]	; (b5ea0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5e8a:	4a06      	ldr	r2, [pc, #24]	; (b5ea4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5e8c:	4906      	ldr	r1, [pc, #24]	; (b5ea8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5e8e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5e90:	1a12      	subs	r2, r2, r0
   b5e92:	f000 fda5 	bl	b69e0 <memcpy>
    __backup_sram_signature = signature;
   b5e96:	4b05      	ldr	r3, [pc, #20]	; (b5eac <_Z33system_initialize_user_backup_ramv+0x24>)
   b5e98:	4a05      	ldr	r2, [pc, #20]	; (b5eb0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5e9a:	601a      	str	r2, [r3, #0]
}
   b5e9c:	bd08      	pop	{r3, pc}
   b5e9e:	bf00      	nop
   b5ea0:	2003f400 	.word	0x2003f400
   b5ea4:	2003f404 	.word	0x2003f404
   b5ea8:	000b7290 	.word	0x000b7290
   b5eac:	2003f400 	.word	0x2003f400
   b5eb0:	9a271c1e 	.word	0x9a271c1e

000b5eb4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5eb4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5eb6:	2300      	movs	r3, #0
   b5eb8:	9300      	str	r3, [sp, #0]
   b5eba:	461a      	mov	r2, r3
   b5ebc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5ec0:	f7ff f8ee 	bl	b50a0 <system_ctrl_set_result>
}
   b5ec4:	b003      	add	sp, #12
   b5ec6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5ecc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5ecc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5ece:	8843      	ldrh	r3, [r0, #2]
   b5ed0:	2b0a      	cmp	r3, #10
   b5ed2:	d008      	beq.n	b5ee6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5ed4:	2b50      	cmp	r3, #80	; 0x50
   b5ed6:	d10b      	bne.n	b5ef0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5ed8:	4b09      	ldr	r3, [pc, #36]	; (b5f00 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5eda:	681b      	ldr	r3, [r3, #0]
   b5edc:	b14b      	cbz	r3, b5ef2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5ede:	b003      	add	sp, #12
   b5ee0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5ee4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5ee6:	f7ff ffe5 	bl	b5eb4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5eea:	b003      	add	sp, #12
   b5eec:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5ef0:	2300      	movs	r3, #0
   b5ef2:	9300      	str	r3, [sp, #0]
   b5ef4:	461a      	mov	r2, r3
   b5ef6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5efa:	f7ff f8d1 	bl	b50a0 <system_ctrl_set_result>
}
   b5efe:	e7f4      	b.n	b5eea <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5f00:	2003e7d4 	.word	0x2003e7d4

000b5f04 <module_user_init_hook>:
{
   b5f04:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5f06:	4812      	ldr	r0, [pc, #72]	; (b5f50 <module_user_init_hook+0x4c>)
   b5f08:	2100      	movs	r1, #0
   b5f0a:	f7ff f98b 	bl	b5224 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5f0e:	4b11      	ldr	r3, [pc, #68]	; (b5f54 <module_user_init_hook+0x50>)
   b5f10:	681a      	ldr	r2, [r3, #0]
   b5f12:	4b11      	ldr	r3, [pc, #68]	; (b5f58 <module_user_init_hook+0x54>)
   b5f14:	429a      	cmp	r2, r3
   b5f16:	4b11      	ldr	r3, [pc, #68]	; (b5f5c <module_user_init_hook+0x58>)
   b5f18:	bf0c      	ite	eq
   b5f1a:	2201      	moveq	r2, #1
   b5f1c:	2200      	movne	r2, #0
   b5f1e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5f20:	d001      	beq.n	b5f26 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5f22:	f7ff ffb1 	bl	b5e88 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5f26:	f7fe ff11 	bl	b4d4c <HAL_RNG_GetRandomNumber>
   b5f2a:	4604      	mov	r4, r0
    srand(seed);
   b5f2c:	f000 fd6e 	bl	b6a0c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5f30:	4b0b      	ldr	r3, [pc, #44]	; (b5f60 <module_user_init_hook+0x5c>)
   b5f32:	b113      	cbz	r3, b5f3a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5f34:	4620      	mov	r0, r4
   b5f36:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5f3a:	2100      	movs	r1, #0
   b5f3c:	4808      	ldr	r0, [pc, #32]	; (b5f60 <module_user_init_hook+0x5c>)
   b5f3e:	f7ff f8d9 	bl	b50f4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5f46:	4807      	ldr	r0, [pc, #28]	; (b5f64 <module_user_init_hook+0x60>)
   b5f48:	2100      	movs	r1, #0
   b5f4a:	f7ff b89f 	b.w	b508c <system_ctrl_set_app_request_handler>
   b5f4e:	bf00      	nop
   b5f50:	000b5e31 	.word	0x000b5e31
   b5f54:	2003f400 	.word	0x2003f400
   b5f58:	9a271c1e 	.word	0x9a271c1e
   b5f5c:	2003e7d0 	.word	0x2003e7d0
   b5f60:	00000000 	.word	0x00000000
   b5f64:	000b5ecd 	.word	0x000b5ecd

000b5f68 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5f68:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5f6a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5f6c:	d902      	bls.n	b5f74 <pinAvailable+0xc>
    return false;
   b5f6e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5f70:	b002      	add	sp, #8
   b5f72:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5f74:	f1a0 030b 	sub.w	r3, r0, #11
   b5f78:	2b02      	cmp	r3, #2
   b5f7a:	d81a      	bhi.n	b5fb2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5f7c:	4c17      	ldr	r4, [pc, #92]	; (b5fdc <pinAvailable+0x74>)
   b5f7e:	7821      	ldrb	r1, [r4, #0]
   b5f80:	f3bf 8f5b 	dmb	ish
   b5f84:	f011 0101 	ands.w	r1, r1, #1
   b5f88:	d10b      	bne.n	b5fa2 <pinAvailable+0x3a>
   b5f8a:	4620      	mov	r0, r4
   b5f8c:	9101      	str	r1, [sp, #4]
   b5f8e:	f7fe f88f 	bl	b40b0 <__cxa_guard_acquire>
   b5f92:	9901      	ldr	r1, [sp, #4]
   b5f94:	b128      	cbz	r0, b5fa2 <pinAvailable+0x3a>
   b5f96:	4812      	ldr	r0, [pc, #72]	; (b5fe0 <pinAvailable+0x78>)
   b5f98:	f7ff fbe8 	bl	b576c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5f9c:	4620      	mov	r0, r4
   b5f9e:	f7fe f88c 	bl	b40ba <__cxa_guard_release>
   b5fa2:	4b0f      	ldr	r3, [pc, #60]	; (b5fe0 <pinAvailable+0x78>)
   b5fa4:	7818      	ldrb	r0, [r3, #0]
   b5fa6:	f7fe ffb1 	bl	b4f0c <hal_spi_is_enabled>
   b5faa:	2800      	cmp	r0, #0
   b5fac:	d1df      	bne.n	b5f6e <pinAvailable+0x6>
  return true; // 'pin' is available
   b5fae:	2001      	movs	r0, #1
   b5fb0:	e7de      	b.n	b5f70 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5fb2:	2801      	cmp	r0, #1
   b5fb4:	d809      	bhi.n	b5fca <pinAvailable+0x62>
   b5fb6:	f000 f88b 	bl	b60d0 <_Z19__fetch_global_Wirev>
   b5fba:	2100      	movs	r1, #0
   b5fbc:	7c00      	ldrb	r0, [r0, #16]
   b5fbe:	f7fe ff4d 	bl	b4e5c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5fc2:	f080 0001 	eor.w	r0, r0, #1
   b5fc6:	b2c0      	uxtb	r0, r0
   b5fc8:	e7d2      	b.n	b5f70 <pinAvailable+0x8>
   b5fca:	3809      	subs	r0, #9
   b5fcc:	2801      	cmp	r0, #1
   b5fce:	d8ee      	bhi.n	b5fae <pinAvailable+0x46>
   b5fd0:	f7ff fe3e 	bl	b5c50 <_Z22__fetch_global_Serial1v>
   b5fd4:	7c00      	ldrb	r0, [r0, #16]
   b5fd6:	f7fe ffe9 	bl	b4fac <hal_usart_is_enabled>
   b5fda:	e7f2      	b.n	b5fc2 <pinAvailable+0x5a>
   b5fdc:	2003e638 	.word	0x2003e638
   b5fe0:	2003e63c 	.word	0x2003e63c

000b5fe4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5fe4:	2823      	cmp	r0, #35	; 0x23
{
   b5fe6:	b538      	push	{r3, r4, r5, lr}
   b5fe8:	4604      	mov	r4, r0
   b5fea:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5fec:	d80a      	bhi.n	b6004 <pinMode+0x20>
   b5fee:	29ff      	cmp	r1, #255	; 0xff
   b5ff0:	d008      	beq.n	b6004 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5ff2:	f7ff ffb9 	bl	b5f68 <pinAvailable>
   b5ff6:	b128      	cbz	r0, b6004 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5ff8:	4629      	mov	r1, r5
   b5ffa:	4620      	mov	r0, r4
}
   b5ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6000:	f7fe becc 	b.w	b4d9c <HAL_Pin_Mode>
}
   b6004:	bd38      	pop	{r3, r4, r5, pc}

000b6006 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6006:	b538      	push	{r3, r4, r5, lr}
   b6008:	4604      	mov	r4, r0
   b600a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b600c:	f7fe fece 	bl	b4dac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6010:	28ff      	cmp	r0, #255	; 0xff
   b6012:	d010      	beq.n	b6036 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6014:	2806      	cmp	r0, #6
   b6016:	d804      	bhi.n	b6022 <digitalWrite+0x1c>
   b6018:	234d      	movs	r3, #77	; 0x4d
   b601a:	fa23 f000 	lsr.w	r0, r3, r0
   b601e:	07c3      	lsls	r3, r0, #31
   b6020:	d409      	bmi.n	b6036 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6022:	4620      	mov	r0, r4
   b6024:	f7ff ffa0 	bl	b5f68 <pinAvailable>
   b6028:	b128      	cbz	r0, b6036 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b602a:	4629      	mov	r1, r5
   b602c:	4620      	mov	r0, r4
}
   b602e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6032:	f7fe bec3 	b.w	b4dbc <HAL_GPIO_Write>
}
   b6036:	bd38      	pop	{r3, r4, r5, pc}

000b6038 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b6038:	b510      	push	{r4, lr}
   b603a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b603c:	f7fe feb6 	bl	b4dac <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6040:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b6042:	b2db      	uxtb	r3, r3
   b6044:	2b01      	cmp	r3, #1
   b6046:	d908      	bls.n	b605a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b6048:	4620      	mov	r0, r4
   b604a:	f7ff ff8d 	bl	b5f68 <pinAvailable>
   b604e:	b120      	cbz	r0, b605a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b6050:	4620      	mov	r0, r4
}
   b6052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b6056:	f7fe beb9 	b.w	b4dcc <HAL_GPIO_Read>
}
   b605a:	2000      	movs	r0, #0
   b605c:	bd10      	pop	{r4, pc}

000b605e <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b605e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6062:	4690      	mov	r8, r2
   b6064:	461f      	mov	r7, r3
   b6066:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b6068:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b606a:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b606c:	f1c4 0107 	rsb	r1, r4, #7
   b6070:	f1b8 0f00 	cmp.w	r8, #0
   b6074:	d112      	bne.n	b609c <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b6076:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b607a:	f001 0101 	and.w	r1, r1, #1
   b607e:	4630      	mov	r0, r6
   b6080:	f7ff ffc1 	bl	b6006 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b6084:	2101      	movs	r1, #1
   b6086:	4628      	mov	r0, r5
   b6088:	f7ff ffbd 	bl	b6006 <digitalWrite>
    digitalWrite(clockPin, LOW);
   b608c:	2100      	movs	r1, #0
   b608e:	4628      	mov	r0, r5
   b6090:	f7ff ffb9 	bl	b6006 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b6094:	3c01      	subs	r4, #1
   b6096:	d2e9      	bcs.n	b606c <shiftOut+0xe>
  }
}
   b6098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b609c:	fa47 f104 	asr.w	r1, r7, r4
   b60a0:	e7eb      	b.n	b607a <shiftOut+0x1c>
	...

000b60a4 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   b60a4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b60a6:	2520      	movs	r5, #32
   b60a8:	2314      	movs	r3, #20
{
   b60aa:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b60ac:	6003      	str	r3, [r0, #0]
   b60ae:	6085      	str	r5, [r0, #8]
   b60b0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b60b2:	4906      	ldr	r1, [pc, #24]	; (b60cc <_Z17acquireWireBufferv+0x28>)
   b60b4:	4628      	mov	r0, r5
   b60b6:	f000 f83a 	bl	b612e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b60ba:	4904      	ldr	r1, [pc, #16]	; (b60cc <_Z17acquireWireBufferv+0x28>)
	};
   b60bc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b60be:	4628      	mov	r0, r5
   b60c0:	f000 f835 	bl	b612e <_ZnajRKSt9nothrow_t>
	};
   b60c4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   b60c6:	4620      	mov	r0, r4
   b60c8:	bd38      	pop	{r3, r4, r5, pc}
   b60ca:	bf00      	nop
   b60cc:	000b71a0 	.word	0x000b71a0

000b60d0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   b60d0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b60d2:	4d0f      	ldr	r5, [pc, #60]	; (b6110 <_Z19__fetch_global_Wirev+0x40>)
   b60d4:	7829      	ldrb	r1, [r5, #0]
   b60d6:	f3bf 8f5b 	dmb	ish
   b60da:	f011 0401 	ands.w	r4, r1, #1
{
   b60de:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b60e0:	d113      	bne.n	b610a <_Z19__fetch_global_Wirev+0x3a>
   b60e2:	4628      	mov	r0, r5
   b60e4:	f7fd ffe4 	bl	b40b0 <__cxa_guard_acquire>
   b60e8:	b178      	cbz	r0, b610a <_Z19__fetch_global_Wirev+0x3a>
   b60ea:	a801      	add	r0, sp, #4
   b60ec:	f7ff ffda 	bl	b60a4 <_Z17acquireWireBufferv>
   b60f0:	aa01      	add	r2, sp, #4
   b60f2:	4621      	mov	r1, r4
   b60f4:	4807      	ldr	r0, [pc, #28]	; (b6114 <_Z19__fetch_global_Wirev+0x44>)
   b60f6:	f7ff f937 	bl	b5368 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b60fa:	4628      	mov	r0, r5
   b60fc:	f7fd ffdd 	bl	b40ba <__cxa_guard_release>
   b6100:	4a05      	ldr	r2, [pc, #20]	; (b6118 <_Z19__fetch_global_Wirev+0x48>)
   b6102:	4906      	ldr	r1, [pc, #24]	; (b611c <_Z19__fetch_global_Wirev+0x4c>)
   b6104:	4803      	ldr	r0, [pc, #12]	; (b6114 <_Z19__fetch_global_Wirev+0x44>)
   b6106:	f000 f80b 	bl	b6120 <__aeabi_atexit>
	return wire;
}
   b610a:	4802      	ldr	r0, [pc, #8]	; (b6114 <_Z19__fetch_global_Wirev+0x44>)
   b610c:	b007      	add	sp, #28
   b610e:	bd30      	pop	{r4, r5, pc}
   b6110:	2003e7dc 	.word	0x2003e7dc
   b6114:	2003e7e0 	.word	0x2003e7e0
   b6118:	2003e5e0 	.word	0x2003e5e0
   b611c:	000b5311 	.word	0x000b5311

000b6120 <__aeabi_atexit>:
   b6120:	460b      	mov	r3, r1
   b6122:	4601      	mov	r1, r0
   b6124:	4618      	mov	r0, r3
   b6126:	f000 bc4d 	b.w	b69c4 <__cxa_atexit>

000b612a <_ZdlPvj>:
   b612a:	f7fd bfb4 	b.w	b4096 <_ZdlPv>

000b612e <_ZnajRKSt9nothrow_t>:
   b612e:	f7fd bfb0 	b.w	b4092 <_Znaj>
	...

000b6134 <__aeabi_drsub>:
   b6134:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6138:	e002      	b.n	b6140 <__adddf3>
   b613a:	bf00      	nop

000b613c <__aeabi_dsub>:
   b613c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6140 <__adddf3>:
   b6140:	b530      	push	{r4, r5, lr}
   b6142:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b6146:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b614a:	ea94 0f05 	teq	r4, r5
   b614e:	bf08      	it	eq
   b6150:	ea90 0f02 	teqeq	r0, r2
   b6154:	bf1f      	itttt	ne
   b6156:	ea54 0c00 	orrsne.w	ip, r4, r0
   b615a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b615e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6162:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6166:	f000 80e2 	beq.w	b632e <__adddf3+0x1ee>
   b616a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b616e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6172:	bfb8      	it	lt
   b6174:	426d      	neglt	r5, r5
   b6176:	dd0c      	ble.n	b6192 <__adddf3+0x52>
   b6178:	442c      	add	r4, r5
   b617a:	ea80 0202 	eor.w	r2, r0, r2
   b617e:	ea81 0303 	eor.w	r3, r1, r3
   b6182:	ea82 0000 	eor.w	r0, r2, r0
   b6186:	ea83 0101 	eor.w	r1, r3, r1
   b618a:	ea80 0202 	eor.w	r2, r0, r2
   b618e:	ea81 0303 	eor.w	r3, r1, r3
   b6192:	2d36      	cmp	r5, #54	; 0x36
   b6194:	bf88      	it	hi
   b6196:	bd30      	pophi	{r4, r5, pc}
   b6198:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b619c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b61a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b61a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b61a8:	d002      	beq.n	b61b0 <__adddf3+0x70>
   b61aa:	4240      	negs	r0, r0
   b61ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b61b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b61b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b61b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b61bc:	d002      	beq.n	b61c4 <__adddf3+0x84>
   b61be:	4252      	negs	r2, r2
   b61c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b61c4:	ea94 0f05 	teq	r4, r5
   b61c8:	f000 80a7 	beq.w	b631a <__adddf3+0x1da>
   b61cc:	f1a4 0401 	sub.w	r4, r4, #1
   b61d0:	f1d5 0e20 	rsbs	lr, r5, #32
   b61d4:	db0d      	blt.n	b61f2 <__adddf3+0xb2>
   b61d6:	fa02 fc0e 	lsl.w	ip, r2, lr
   b61da:	fa22 f205 	lsr.w	r2, r2, r5
   b61de:	1880      	adds	r0, r0, r2
   b61e0:	f141 0100 	adc.w	r1, r1, #0
   b61e4:	fa03 f20e 	lsl.w	r2, r3, lr
   b61e8:	1880      	adds	r0, r0, r2
   b61ea:	fa43 f305 	asr.w	r3, r3, r5
   b61ee:	4159      	adcs	r1, r3
   b61f0:	e00e      	b.n	b6210 <__adddf3+0xd0>
   b61f2:	f1a5 0520 	sub.w	r5, r5, #32
   b61f6:	f10e 0e20 	add.w	lr, lr, #32
   b61fa:	2a01      	cmp	r2, #1
   b61fc:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6200:	bf28      	it	cs
   b6202:	f04c 0c02 	orrcs.w	ip, ip, #2
   b6206:	fa43 f305 	asr.w	r3, r3, r5
   b620a:	18c0      	adds	r0, r0, r3
   b620c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6210:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6214:	d507      	bpl.n	b6226 <__adddf3+0xe6>
   b6216:	f04f 0e00 	mov.w	lr, #0
   b621a:	f1dc 0c00 	rsbs	ip, ip, #0
   b621e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b6222:	eb6e 0101 	sbc.w	r1, lr, r1
   b6226:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b622a:	d31b      	bcc.n	b6264 <__adddf3+0x124>
   b622c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6230:	d30c      	bcc.n	b624c <__adddf3+0x10c>
   b6232:	0849      	lsrs	r1, r1, #1
   b6234:	ea5f 0030 	movs.w	r0, r0, rrx
   b6238:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b623c:	f104 0401 	add.w	r4, r4, #1
   b6240:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6244:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6248:	f080 809a 	bcs.w	b6380 <__adddf3+0x240>
   b624c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6250:	bf08      	it	eq
   b6252:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6256:	f150 0000 	adcs.w	r0, r0, #0
   b625a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b625e:	ea41 0105 	orr.w	r1, r1, r5
   b6262:	bd30      	pop	{r4, r5, pc}
   b6264:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6268:	4140      	adcs	r0, r0
   b626a:	eb41 0101 	adc.w	r1, r1, r1
   b626e:	3c01      	subs	r4, #1
   b6270:	bf28      	it	cs
   b6272:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6276:	d2e9      	bcs.n	b624c <__adddf3+0x10c>
   b6278:	f091 0f00 	teq	r1, #0
   b627c:	bf04      	itt	eq
   b627e:	4601      	moveq	r1, r0
   b6280:	2000      	moveq	r0, #0
   b6282:	fab1 f381 	clz	r3, r1
   b6286:	bf08      	it	eq
   b6288:	3320      	addeq	r3, #32
   b628a:	f1a3 030b 	sub.w	r3, r3, #11
   b628e:	f1b3 0220 	subs.w	r2, r3, #32
   b6292:	da0c      	bge.n	b62ae <__adddf3+0x16e>
   b6294:	320c      	adds	r2, #12
   b6296:	dd08      	ble.n	b62aa <__adddf3+0x16a>
   b6298:	f102 0c14 	add.w	ip, r2, #20
   b629c:	f1c2 020c 	rsb	r2, r2, #12
   b62a0:	fa01 f00c 	lsl.w	r0, r1, ip
   b62a4:	fa21 f102 	lsr.w	r1, r1, r2
   b62a8:	e00c      	b.n	b62c4 <__adddf3+0x184>
   b62aa:	f102 0214 	add.w	r2, r2, #20
   b62ae:	bfd8      	it	le
   b62b0:	f1c2 0c20 	rsble	ip, r2, #32
   b62b4:	fa01 f102 	lsl.w	r1, r1, r2
   b62b8:	fa20 fc0c 	lsr.w	ip, r0, ip
   b62bc:	bfdc      	itt	le
   b62be:	ea41 010c 	orrle.w	r1, r1, ip
   b62c2:	4090      	lslle	r0, r2
   b62c4:	1ae4      	subs	r4, r4, r3
   b62c6:	bfa2      	ittt	ge
   b62c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b62cc:	4329      	orrge	r1, r5
   b62ce:	bd30      	popge	{r4, r5, pc}
   b62d0:	ea6f 0404 	mvn.w	r4, r4
   b62d4:	3c1f      	subs	r4, #31
   b62d6:	da1c      	bge.n	b6312 <__adddf3+0x1d2>
   b62d8:	340c      	adds	r4, #12
   b62da:	dc0e      	bgt.n	b62fa <__adddf3+0x1ba>
   b62dc:	f104 0414 	add.w	r4, r4, #20
   b62e0:	f1c4 0220 	rsb	r2, r4, #32
   b62e4:	fa20 f004 	lsr.w	r0, r0, r4
   b62e8:	fa01 f302 	lsl.w	r3, r1, r2
   b62ec:	ea40 0003 	orr.w	r0, r0, r3
   b62f0:	fa21 f304 	lsr.w	r3, r1, r4
   b62f4:	ea45 0103 	orr.w	r1, r5, r3
   b62f8:	bd30      	pop	{r4, r5, pc}
   b62fa:	f1c4 040c 	rsb	r4, r4, #12
   b62fe:	f1c4 0220 	rsb	r2, r4, #32
   b6302:	fa20 f002 	lsr.w	r0, r0, r2
   b6306:	fa01 f304 	lsl.w	r3, r1, r4
   b630a:	ea40 0003 	orr.w	r0, r0, r3
   b630e:	4629      	mov	r1, r5
   b6310:	bd30      	pop	{r4, r5, pc}
   b6312:	fa21 f004 	lsr.w	r0, r1, r4
   b6316:	4629      	mov	r1, r5
   b6318:	bd30      	pop	{r4, r5, pc}
   b631a:	f094 0f00 	teq	r4, #0
   b631e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b6322:	bf06      	itte	eq
   b6324:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6328:	3401      	addeq	r4, #1
   b632a:	3d01      	subne	r5, #1
   b632c:	e74e      	b.n	b61cc <__adddf3+0x8c>
   b632e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6332:	bf18      	it	ne
   b6334:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6338:	d029      	beq.n	b638e <__adddf3+0x24e>
   b633a:	ea94 0f05 	teq	r4, r5
   b633e:	bf08      	it	eq
   b6340:	ea90 0f02 	teqeq	r0, r2
   b6344:	d005      	beq.n	b6352 <__adddf3+0x212>
   b6346:	ea54 0c00 	orrs.w	ip, r4, r0
   b634a:	bf04      	itt	eq
   b634c:	4619      	moveq	r1, r3
   b634e:	4610      	moveq	r0, r2
   b6350:	bd30      	pop	{r4, r5, pc}
   b6352:	ea91 0f03 	teq	r1, r3
   b6356:	bf1e      	ittt	ne
   b6358:	2100      	movne	r1, #0
   b635a:	2000      	movne	r0, #0
   b635c:	bd30      	popne	{r4, r5, pc}
   b635e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6362:	d105      	bne.n	b6370 <__adddf3+0x230>
   b6364:	0040      	lsls	r0, r0, #1
   b6366:	4149      	adcs	r1, r1
   b6368:	bf28      	it	cs
   b636a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b636e:	bd30      	pop	{r4, r5, pc}
   b6370:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6374:	bf3c      	itt	cc
   b6376:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b637a:	bd30      	popcc	{r4, r5, pc}
   b637c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6380:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6384:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6388:	f04f 0000 	mov.w	r0, #0
   b638c:	bd30      	pop	{r4, r5, pc}
   b638e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6392:	bf1a      	itte	ne
   b6394:	4619      	movne	r1, r3
   b6396:	4610      	movne	r0, r2
   b6398:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b639c:	bf1c      	itt	ne
   b639e:	460b      	movne	r3, r1
   b63a0:	4602      	movne	r2, r0
   b63a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b63a6:	bf06      	itte	eq
   b63a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b63ac:	ea91 0f03 	teqeq	r1, r3
   b63b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b63b4:	bd30      	pop	{r4, r5, pc}
   b63b6:	bf00      	nop

000b63b8 <__aeabi_ui2d>:
   b63b8:	f090 0f00 	teq	r0, #0
   b63bc:	bf04      	itt	eq
   b63be:	2100      	moveq	r1, #0
   b63c0:	4770      	bxeq	lr
   b63c2:	b530      	push	{r4, r5, lr}
   b63c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b63c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b63cc:	f04f 0500 	mov.w	r5, #0
   b63d0:	f04f 0100 	mov.w	r1, #0
   b63d4:	e750      	b.n	b6278 <__adddf3+0x138>
   b63d6:	bf00      	nop

000b63d8 <__aeabi_i2d>:
   b63d8:	f090 0f00 	teq	r0, #0
   b63dc:	bf04      	itt	eq
   b63de:	2100      	moveq	r1, #0
   b63e0:	4770      	bxeq	lr
   b63e2:	b530      	push	{r4, r5, lr}
   b63e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b63e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b63ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b63f0:	bf48      	it	mi
   b63f2:	4240      	negmi	r0, r0
   b63f4:	f04f 0100 	mov.w	r1, #0
   b63f8:	e73e      	b.n	b6278 <__adddf3+0x138>
   b63fa:	bf00      	nop

000b63fc <__aeabi_f2d>:
   b63fc:	0042      	lsls	r2, r0, #1
   b63fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6402:	ea4f 0131 	mov.w	r1, r1, rrx
   b6406:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b640a:	bf1f      	itttt	ne
   b640c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6410:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6414:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6418:	4770      	bxne	lr
   b641a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b641e:	bf08      	it	eq
   b6420:	4770      	bxeq	lr
   b6422:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b6426:	bf04      	itt	eq
   b6428:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b642c:	4770      	bxeq	lr
   b642e:	b530      	push	{r4, r5, lr}
   b6430:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6438:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b643c:	e71c      	b.n	b6278 <__adddf3+0x138>
   b643e:	bf00      	nop

000b6440 <__aeabi_ul2d>:
   b6440:	ea50 0201 	orrs.w	r2, r0, r1
   b6444:	bf08      	it	eq
   b6446:	4770      	bxeq	lr
   b6448:	b530      	push	{r4, r5, lr}
   b644a:	f04f 0500 	mov.w	r5, #0
   b644e:	e00a      	b.n	b6466 <__aeabi_l2d+0x16>

000b6450 <__aeabi_l2d>:
   b6450:	ea50 0201 	orrs.w	r2, r0, r1
   b6454:	bf08      	it	eq
   b6456:	4770      	bxeq	lr
   b6458:	b530      	push	{r4, r5, lr}
   b645a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b645e:	d502      	bpl.n	b6466 <__aeabi_l2d+0x16>
   b6460:	4240      	negs	r0, r0
   b6462:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6466:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b646a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b646e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6472:	f43f aed8 	beq.w	b6226 <__adddf3+0xe6>
   b6476:	f04f 0203 	mov.w	r2, #3
   b647a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b647e:	bf18      	it	ne
   b6480:	3203      	addne	r2, #3
   b6482:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6486:	bf18      	it	ne
   b6488:	3203      	addne	r2, #3
   b648a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b648e:	f1c2 0320 	rsb	r3, r2, #32
   b6492:	fa00 fc03 	lsl.w	ip, r0, r3
   b6496:	fa20 f002 	lsr.w	r0, r0, r2
   b649a:	fa01 fe03 	lsl.w	lr, r1, r3
   b649e:	ea40 000e 	orr.w	r0, r0, lr
   b64a2:	fa21 f102 	lsr.w	r1, r1, r2
   b64a6:	4414      	add	r4, r2
   b64a8:	e6bd      	b.n	b6226 <__adddf3+0xe6>
   b64aa:	bf00      	nop

000b64ac <__aeabi_dmul>:
   b64ac:	b570      	push	{r4, r5, r6, lr}
   b64ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b64b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b64b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b64ba:	bf1d      	ittte	ne
   b64bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b64c0:	ea94 0f0c 	teqne	r4, ip
   b64c4:	ea95 0f0c 	teqne	r5, ip
   b64c8:	f000 f8de 	bleq	b6688 <__aeabi_dmul+0x1dc>
   b64cc:	442c      	add	r4, r5
   b64ce:	ea81 0603 	eor.w	r6, r1, r3
   b64d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b64d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b64da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b64de:	bf18      	it	ne
   b64e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b64e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b64e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b64ec:	d038      	beq.n	b6560 <__aeabi_dmul+0xb4>
   b64ee:	fba0 ce02 	umull	ip, lr, r0, r2
   b64f2:	f04f 0500 	mov.w	r5, #0
   b64f6:	fbe1 e502 	umlal	lr, r5, r1, r2
   b64fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b64fe:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6502:	f04f 0600 	mov.w	r6, #0
   b6506:	fbe1 5603 	umlal	r5, r6, r1, r3
   b650a:	f09c 0f00 	teq	ip, #0
   b650e:	bf18      	it	ne
   b6510:	f04e 0e01 	orrne.w	lr, lr, #1
   b6514:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6518:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b651c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6520:	d204      	bcs.n	b652c <__aeabi_dmul+0x80>
   b6522:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b6526:	416d      	adcs	r5, r5
   b6528:	eb46 0606 	adc.w	r6, r6, r6
   b652c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6530:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6534:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6538:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b653c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6540:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6544:	bf88      	it	hi
   b6546:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b654a:	d81e      	bhi.n	b658a <__aeabi_dmul+0xde>
   b654c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6550:	bf08      	it	eq
   b6552:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6556:	f150 0000 	adcs.w	r0, r0, #0
   b655a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b655e:	bd70      	pop	{r4, r5, r6, pc}
   b6560:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6564:	ea46 0101 	orr.w	r1, r6, r1
   b6568:	ea40 0002 	orr.w	r0, r0, r2
   b656c:	ea81 0103 	eor.w	r1, r1, r3
   b6570:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6574:	bfc2      	ittt	gt
   b6576:	ebd4 050c 	rsbsgt	r5, r4, ip
   b657a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b657e:	bd70      	popgt	{r4, r5, r6, pc}
   b6580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6584:	f04f 0e00 	mov.w	lr, #0
   b6588:	3c01      	subs	r4, #1
   b658a:	f300 80ab 	bgt.w	b66e4 <__aeabi_dmul+0x238>
   b658e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6592:	bfde      	ittt	le
   b6594:	2000      	movle	r0, #0
   b6596:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b659a:	bd70      	pople	{r4, r5, r6, pc}
   b659c:	f1c4 0400 	rsb	r4, r4, #0
   b65a0:	3c20      	subs	r4, #32
   b65a2:	da35      	bge.n	b6610 <__aeabi_dmul+0x164>
   b65a4:	340c      	adds	r4, #12
   b65a6:	dc1b      	bgt.n	b65e0 <__aeabi_dmul+0x134>
   b65a8:	f104 0414 	add.w	r4, r4, #20
   b65ac:	f1c4 0520 	rsb	r5, r4, #32
   b65b0:	fa00 f305 	lsl.w	r3, r0, r5
   b65b4:	fa20 f004 	lsr.w	r0, r0, r4
   b65b8:	fa01 f205 	lsl.w	r2, r1, r5
   b65bc:	ea40 0002 	orr.w	r0, r0, r2
   b65c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b65c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b65c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b65cc:	fa21 f604 	lsr.w	r6, r1, r4
   b65d0:	eb42 0106 	adc.w	r1, r2, r6
   b65d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b65d8:	bf08      	it	eq
   b65da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b65de:	bd70      	pop	{r4, r5, r6, pc}
   b65e0:	f1c4 040c 	rsb	r4, r4, #12
   b65e4:	f1c4 0520 	rsb	r5, r4, #32
   b65e8:	fa00 f304 	lsl.w	r3, r0, r4
   b65ec:	fa20 f005 	lsr.w	r0, r0, r5
   b65f0:	fa01 f204 	lsl.w	r2, r1, r4
   b65f4:	ea40 0002 	orr.w	r0, r0, r2
   b65f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b65fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6600:	f141 0100 	adc.w	r1, r1, #0
   b6604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6608:	bf08      	it	eq
   b660a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b660e:	bd70      	pop	{r4, r5, r6, pc}
   b6610:	f1c4 0520 	rsb	r5, r4, #32
   b6614:	fa00 f205 	lsl.w	r2, r0, r5
   b6618:	ea4e 0e02 	orr.w	lr, lr, r2
   b661c:	fa20 f304 	lsr.w	r3, r0, r4
   b6620:	fa01 f205 	lsl.w	r2, r1, r5
   b6624:	ea43 0302 	orr.w	r3, r3, r2
   b6628:	fa21 f004 	lsr.w	r0, r1, r4
   b662c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6630:	fa21 f204 	lsr.w	r2, r1, r4
   b6634:	ea20 0002 	bic.w	r0, r0, r2
   b6638:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b663c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6640:	bf08      	it	eq
   b6642:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6646:	bd70      	pop	{r4, r5, r6, pc}
   b6648:	f094 0f00 	teq	r4, #0
   b664c:	d10f      	bne.n	b666e <__aeabi_dmul+0x1c2>
   b664e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6652:	0040      	lsls	r0, r0, #1
   b6654:	eb41 0101 	adc.w	r1, r1, r1
   b6658:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b665c:	bf08      	it	eq
   b665e:	3c01      	subeq	r4, #1
   b6660:	d0f7      	beq.n	b6652 <__aeabi_dmul+0x1a6>
   b6662:	ea41 0106 	orr.w	r1, r1, r6
   b6666:	f095 0f00 	teq	r5, #0
   b666a:	bf18      	it	ne
   b666c:	4770      	bxne	lr
   b666e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6672:	0052      	lsls	r2, r2, #1
   b6674:	eb43 0303 	adc.w	r3, r3, r3
   b6678:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b667c:	bf08      	it	eq
   b667e:	3d01      	subeq	r5, #1
   b6680:	d0f7      	beq.n	b6672 <__aeabi_dmul+0x1c6>
   b6682:	ea43 0306 	orr.w	r3, r3, r6
   b6686:	4770      	bx	lr
   b6688:	ea94 0f0c 	teq	r4, ip
   b668c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6690:	bf18      	it	ne
   b6692:	ea95 0f0c 	teqne	r5, ip
   b6696:	d00c      	beq.n	b66b2 <__aeabi_dmul+0x206>
   b6698:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b669c:	bf18      	it	ne
   b669e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b66a2:	d1d1      	bne.n	b6648 <__aeabi_dmul+0x19c>
   b66a4:	ea81 0103 	eor.w	r1, r1, r3
   b66a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b66ac:	f04f 0000 	mov.w	r0, #0
   b66b0:	bd70      	pop	{r4, r5, r6, pc}
   b66b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b66b6:	bf06      	itte	eq
   b66b8:	4610      	moveq	r0, r2
   b66ba:	4619      	moveq	r1, r3
   b66bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b66c0:	d019      	beq.n	b66f6 <__aeabi_dmul+0x24a>
   b66c2:	ea94 0f0c 	teq	r4, ip
   b66c6:	d102      	bne.n	b66ce <__aeabi_dmul+0x222>
   b66c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b66cc:	d113      	bne.n	b66f6 <__aeabi_dmul+0x24a>
   b66ce:	ea95 0f0c 	teq	r5, ip
   b66d2:	d105      	bne.n	b66e0 <__aeabi_dmul+0x234>
   b66d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b66d8:	bf1c      	itt	ne
   b66da:	4610      	movne	r0, r2
   b66dc:	4619      	movne	r1, r3
   b66de:	d10a      	bne.n	b66f6 <__aeabi_dmul+0x24a>
   b66e0:	ea81 0103 	eor.w	r1, r1, r3
   b66e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b66e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b66ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b66f0:	f04f 0000 	mov.w	r0, #0
   b66f4:	bd70      	pop	{r4, r5, r6, pc}
   b66f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b66fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b66fe:	bd70      	pop	{r4, r5, r6, pc}

000b6700 <__aeabi_ddiv>:
   b6700:	b570      	push	{r4, r5, r6, lr}
   b6702:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6706:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b670a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b670e:	bf1d      	ittte	ne
   b6710:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6714:	ea94 0f0c 	teqne	r4, ip
   b6718:	ea95 0f0c 	teqne	r5, ip
   b671c:	f000 f8a7 	bleq	b686e <__aeabi_ddiv+0x16e>
   b6720:	eba4 0405 	sub.w	r4, r4, r5
   b6724:	ea81 0e03 	eor.w	lr, r1, r3
   b6728:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b672c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6730:	f000 8088 	beq.w	b6844 <__aeabi_ddiv+0x144>
   b6734:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6738:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b673c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6740:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b6744:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6748:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b674c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6750:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b6754:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6758:	429d      	cmp	r5, r3
   b675a:	bf08      	it	eq
   b675c:	4296      	cmpeq	r6, r2
   b675e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6762:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b6766:	d202      	bcs.n	b676e <__aeabi_ddiv+0x6e>
   b6768:	085b      	lsrs	r3, r3, #1
   b676a:	ea4f 0232 	mov.w	r2, r2, rrx
   b676e:	1ab6      	subs	r6, r6, r2
   b6770:	eb65 0503 	sbc.w	r5, r5, r3
   b6774:	085b      	lsrs	r3, r3, #1
   b6776:	ea4f 0232 	mov.w	r2, r2, rrx
   b677a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b677e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b6782:	ebb6 0e02 	subs.w	lr, r6, r2
   b6786:	eb75 0e03 	sbcs.w	lr, r5, r3
   b678a:	bf22      	ittt	cs
   b678c:	1ab6      	subcs	r6, r6, r2
   b678e:	4675      	movcs	r5, lr
   b6790:	ea40 000c 	orrcs.w	r0, r0, ip
   b6794:	085b      	lsrs	r3, r3, #1
   b6796:	ea4f 0232 	mov.w	r2, r2, rrx
   b679a:	ebb6 0e02 	subs.w	lr, r6, r2
   b679e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b67a2:	bf22      	ittt	cs
   b67a4:	1ab6      	subcs	r6, r6, r2
   b67a6:	4675      	movcs	r5, lr
   b67a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b67ac:	085b      	lsrs	r3, r3, #1
   b67ae:	ea4f 0232 	mov.w	r2, r2, rrx
   b67b2:	ebb6 0e02 	subs.w	lr, r6, r2
   b67b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b67ba:	bf22      	ittt	cs
   b67bc:	1ab6      	subcs	r6, r6, r2
   b67be:	4675      	movcs	r5, lr
   b67c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b67c4:	085b      	lsrs	r3, r3, #1
   b67c6:	ea4f 0232 	mov.w	r2, r2, rrx
   b67ca:	ebb6 0e02 	subs.w	lr, r6, r2
   b67ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   b67d2:	bf22      	ittt	cs
   b67d4:	1ab6      	subcs	r6, r6, r2
   b67d6:	4675      	movcs	r5, lr
   b67d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b67dc:	ea55 0e06 	orrs.w	lr, r5, r6
   b67e0:	d018      	beq.n	b6814 <__aeabi_ddiv+0x114>
   b67e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b67e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b67ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b67ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b67f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b67f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b67fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b67fe:	d1c0      	bne.n	b6782 <__aeabi_ddiv+0x82>
   b6800:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6804:	d10b      	bne.n	b681e <__aeabi_ddiv+0x11e>
   b6806:	ea41 0100 	orr.w	r1, r1, r0
   b680a:	f04f 0000 	mov.w	r0, #0
   b680e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b6812:	e7b6      	b.n	b6782 <__aeabi_ddiv+0x82>
   b6814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6818:	bf04      	itt	eq
   b681a:	4301      	orreq	r1, r0
   b681c:	2000      	moveq	r0, #0
   b681e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6822:	bf88      	it	hi
   b6824:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6828:	f63f aeaf 	bhi.w	b658a <__aeabi_dmul+0xde>
   b682c:	ebb5 0c03 	subs.w	ip, r5, r3
   b6830:	bf04      	itt	eq
   b6832:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6836:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b683a:	f150 0000 	adcs.w	r0, r0, #0
   b683e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6842:	bd70      	pop	{r4, r5, r6, pc}
   b6844:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6848:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b684c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6850:	bfc2      	ittt	gt
   b6852:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6856:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b685a:	bd70      	popgt	{r4, r5, r6, pc}
   b685c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6860:	f04f 0e00 	mov.w	lr, #0
   b6864:	3c01      	subs	r4, #1
   b6866:	e690      	b.n	b658a <__aeabi_dmul+0xde>
   b6868:	ea45 0e06 	orr.w	lr, r5, r6
   b686c:	e68d      	b.n	b658a <__aeabi_dmul+0xde>
   b686e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6872:	ea94 0f0c 	teq	r4, ip
   b6876:	bf08      	it	eq
   b6878:	ea95 0f0c 	teqeq	r5, ip
   b687c:	f43f af3b 	beq.w	b66f6 <__aeabi_dmul+0x24a>
   b6880:	ea94 0f0c 	teq	r4, ip
   b6884:	d10a      	bne.n	b689c <__aeabi_ddiv+0x19c>
   b6886:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b688a:	f47f af34 	bne.w	b66f6 <__aeabi_dmul+0x24a>
   b688e:	ea95 0f0c 	teq	r5, ip
   b6892:	f47f af25 	bne.w	b66e0 <__aeabi_dmul+0x234>
   b6896:	4610      	mov	r0, r2
   b6898:	4619      	mov	r1, r3
   b689a:	e72c      	b.n	b66f6 <__aeabi_dmul+0x24a>
   b689c:	ea95 0f0c 	teq	r5, ip
   b68a0:	d106      	bne.n	b68b0 <__aeabi_ddiv+0x1b0>
   b68a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b68a6:	f43f aefd 	beq.w	b66a4 <__aeabi_dmul+0x1f8>
   b68aa:	4610      	mov	r0, r2
   b68ac:	4619      	mov	r1, r3
   b68ae:	e722      	b.n	b66f6 <__aeabi_dmul+0x24a>
   b68b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b68b4:	bf18      	it	ne
   b68b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b68ba:	f47f aec5 	bne.w	b6648 <__aeabi_dmul+0x19c>
   b68be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b68c2:	f47f af0d 	bne.w	b66e0 <__aeabi_dmul+0x234>
   b68c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b68ca:	f47f aeeb 	bne.w	b66a4 <__aeabi_dmul+0x1f8>
   b68ce:	e712      	b.n	b66f6 <__aeabi_dmul+0x24a>

000b68d0 <__aeabi_d2uiz>:
   b68d0:	004a      	lsls	r2, r1, #1
   b68d2:	d211      	bcs.n	b68f8 <__aeabi_d2uiz+0x28>
   b68d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b68d8:	d211      	bcs.n	b68fe <__aeabi_d2uiz+0x2e>
   b68da:	d50d      	bpl.n	b68f8 <__aeabi_d2uiz+0x28>
   b68dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b68e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b68e4:	d40e      	bmi.n	b6904 <__aeabi_d2uiz+0x34>
   b68e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b68ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b68ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b68f2:	fa23 f002 	lsr.w	r0, r3, r2
   b68f6:	4770      	bx	lr
   b68f8:	f04f 0000 	mov.w	r0, #0
   b68fc:	4770      	bx	lr
   b68fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b6902:	d102      	bne.n	b690a <__aeabi_d2uiz+0x3a>
   b6904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6908:	4770      	bx	lr
   b690a:	f04f 0000 	mov.w	r0, #0
   b690e:	4770      	bx	lr

000b6910 <__aeabi_f2lz>:
   b6910:	ee07 0a90 	vmov	s15, r0
   b6914:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b6918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b691c:	d401      	bmi.n	b6922 <__aeabi_f2lz+0x12>
   b691e:	f000 b80b 	b.w	b6938 <__aeabi_f2ulz>
   b6922:	eef1 7a67 	vneg.f32	s15, s15
   b6926:	b508      	push	{r3, lr}
   b6928:	ee17 0a90 	vmov	r0, s15
   b692c:	f000 f804 	bl	b6938 <__aeabi_f2ulz>
   b6930:	4240      	negs	r0, r0
   b6932:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6936:	bd08      	pop	{r3, pc}

000b6938 <__aeabi_f2ulz>:
   b6938:	b5d0      	push	{r4, r6, r7, lr}
   b693a:	f7ff fd5f 	bl	b63fc <__aeabi_f2d>
   b693e:	4b0c      	ldr	r3, [pc, #48]	; (b6970 <__aeabi_f2ulz+0x38>)
   b6940:	2200      	movs	r2, #0
   b6942:	4606      	mov	r6, r0
   b6944:	460f      	mov	r7, r1
   b6946:	f7ff fdb1 	bl	b64ac <__aeabi_dmul>
   b694a:	f7ff ffc1 	bl	b68d0 <__aeabi_d2uiz>
   b694e:	4604      	mov	r4, r0
   b6950:	f7ff fd32 	bl	b63b8 <__aeabi_ui2d>
   b6954:	4b07      	ldr	r3, [pc, #28]	; (b6974 <__aeabi_f2ulz+0x3c>)
   b6956:	2200      	movs	r2, #0
   b6958:	f7ff fda8 	bl	b64ac <__aeabi_dmul>
   b695c:	4602      	mov	r2, r0
   b695e:	460b      	mov	r3, r1
   b6960:	4630      	mov	r0, r6
   b6962:	4639      	mov	r1, r7
   b6964:	f7ff fbea 	bl	b613c <__aeabi_dsub>
   b6968:	f7ff ffb2 	bl	b68d0 <__aeabi_d2uiz>
   b696c:	4621      	mov	r1, r4
   b696e:	bdd0      	pop	{r4, r6, r7, pc}
   b6970:	3df00000 	.word	0x3df00000
   b6974:	41f00000 	.word	0x41f00000

000b6978 <asctime_r>:
   b6978:	b510      	push	{r4, lr}
   b697a:	460c      	mov	r4, r1
   b697c:	6941      	ldr	r1, [r0, #20]
   b697e:	6903      	ldr	r3, [r0, #16]
   b6980:	6982      	ldr	r2, [r0, #24]
   b6982:	b086      	sub	sp, #24
   b6984:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b6988:	9104      	str	r1, [sp, #16]
   b698a:	6801      	ldr	r1, [r0, #0]
   b698c:	9103      	str	r1, [sp, #12]
   b698e:	6841      	ldr	r1, [r0, #4]
   b6990:	9102      	str	r1, [sp, #8]
   b6992:	6881      	ldr	r1, [r0, #8]
   b6994:	9101      	str	r1, [sp, #4]
   b6996:	68c1      	ldr	r1, [r0, #12]
   b6998:	9100      	str	r1, [sp, #0]
   b699a:	4907      	ldr	r1, [pc, #28]	; (b69b8 <asctime_r+0x40>)
   b699c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b69a0:	440b      	add	r3, r1
   b69a2:	4906      	ldr	r1, [pc, #24]	; (b69bc <asctime_r+0x44>)
   b69a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b69a8:	440a      	add	r2, r1
   b69aa:	4620      	mov	r0, r4
   b69ac:	4904      	ldr	r1, [pc, #16]	; (b69c0 <asctime_r+0x48>)
   b69ae:	f7fe fc21 	bl	b51f4 <siprintf>
   b69b2:	4620      	mov	r0, r4
   b69b4:	b006      	add	sp, #24
   b69b6:	bd10      	pop	{r4, pc}
   b69b8:	000b71d6 	.word	0x000b71d6
   b69bc:	000b71c1 	.word	0x000b71c1
   b69c0:	000b71a1 	.word	0x000b71a1

000b69c4 <__cxa_atexit>:
   b69c4:	b510      	push	{r4, lr}
   b69c6:	4c05      	ldr	r4, [pc, #20]	; (b69dc <__cxa_atexit+0x18>)
   b69c8:	4613      	mov	r3, r2
   b69ca:	b12c      	cbz	r4, b69d8 <__cxa_atexit+0x14>
   b69cc:	460a      	mov	r2, r1
   b69ce:	4601      	mov	r1, r0
   b69d0:	2002      	movs	r0, #2
   b69d2:	f3af 8000 	nop.w
   b69d6:	bd10      	pop	{r4, pc}
   b69d8:	4620      	mov	r0, r4
   b69da:	e7fc      	b.n	b69d6 <__cxa_atexit+0x12>
   b69dc:	00000000 	.word	0x00000000

000b69e0 <memcpy>:
   b69e0:	440a      	add	r2, r1
   b69e2:	4291      	cmp	r1, r2
   b69e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b69e8:	d100      	bne.n	b69ec <memcpy+0xc>
   b69ea:	4770      	bx	lr
   b69ec:	b510      	push	{r4, lr}
   b69ee:	f811 4b01 	ldrb.w	r4, [r1], #1
   b69f2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b69f6:	4291      	cmp	r1, r2
   b69f8:	d1f9      	bne.n	b69ee <memcpy+0xe>
   b69fa:	bd10      	pop	{r4, pc}

000b69fc <memset>:
   b69fc:	4402      	add	r2, r0
   b69fe:	4603      	mov	r3, r0
   b6a00:	4293      	cmp	r3, r2
   b6a02:	d100      	bne.n	b6a06 <memset+0xa>
   b6a04:	4770      	bx	lr
   b6a06:	f803 1b01 	strb.w	r1, [r3], #1
   b6a0a:	e7f9      	b.n	b6a00 <memset+0x4>

000b6a0c <srand>:
   b6a0c:	b538      	push	{r3, r4, r5, lr}
   b6a0e:	4b10      	ldr	r3, [pc, #64]	; (b6a50 <srand+0x44>)
   b6a10:	681d      	ldr	r5, [r3, #0]
   b6a12:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6a14:	4604      	mov	r4, r0
   b6a16:	b9b3      	cbnz	r3, b6a46 <srand+0x3a>
   b6a18:	2018      	movs	r0, #24
   b6a1a:	f7fe fbd3 	bl	b51c4 <malloc>
   b6a1e:	4602      	mov	r2, r0
   b6a20:	63a8      	str	r0, [r5, #56]	; 0x38
   b6a22:	b920      	cbnz	r0, b6a2e <srand+0x22>
   b6a24:	4b0b      	ldr	r3, [pc, #44]	; (b6a54 <srand+0x48>)
   b6a26:	480c      	ldr	r0, [pc, #48]	; (b6a58 <srand+0x4c>)
   b6a28:	2142      	movs	r1, #66	; 0x42
   b6a2a:	f7fe fbf3 	bl	b5214 <__assert_func>
   b6a2e:	490b      	ldr	r1, [pc, #44]	; (b6a5c <srand+0x50>)
   b6a30:	4b0b      	ldr	r3, [pc, #44]	; (b6a60 <srand+0x54>)
   b6a32:	e9c0 1300 	strd	r1, r3, [r0]
   b6a36:	4b0b      	ldr	r3, [pc, #44]	; (b6a64 <srand+0x58>)
   b6a38:	6083      	str	r3, [r0, #8]
   b6a3a:	230b      	movs	r3, #11
   b6a3c:	8183      	strh	r3, [r0, #12]
   b6a3e:	2100      	movs	r1, #0
   b6a40:	2001      	movs	r0, #1
   b6a42:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6a46:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6a48:	2200      	movs	r2, #0
   b6a4a:	611c      	str	r4, [r3, #16]
   b6a4c:	615a      	str	r2, [r3, #20]
   b6a4e:	bd38      	pop	{r3, r4, r5, pc}
   b6a50:	2003e578 	.word	0x2003e578
   b6a54:	000b71fa 	.word	0x000b71fa
   b6a58:	000b7211 	.word	0x000b7211
   b6a5c:	abcd330e 	.word	0xabcd330e
   b6a60:	e66d1234 	.word	0xe66d1234
   b6a64:	0005deec 	.word	0x0005deec

000b6a68 <strcpy>:
   b6a68:	4603      	mov	r3, r0
   b6a6a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6a6e:	f803 2b01 	strb.w	r2, [r3], #1
   b6a72:	2a00      	cmp	r2, #0
   b6a74:	d1f9      	bne.n	b6a6a <strcpy+0x2>
   b6a76:	4770      	bx	lr

000b6a78 <strlen>:
   b6a78:	4603      	mov	r3, r0
   b6a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6a7e:	2a00      	cmp	r2, #0
   b6a80:	d1fb      	bne.n	b6a7a <strlen+0x2>
   b6a82:	1a18      	subs	r0, r3, r0
   b6a84:	3801      	subs	r0, #1
   b6a86:	4770      	bx	lr

000b6a88 <dynalib_user>:
   b6a88:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6a98:	0000 0000 6954 656d 6920 2073 7325 000a     ....Time is %s..
   b6aa8:	7542 7474 6e6f 6920 2073 7270 7365 6573     Button is presse
   b6ab8:	0064                                        d.

000b6aba <_ZL4font>:
   b6aba:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b6aca:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b6ada:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b6aea:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b6afa:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b6b0a:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b6b1a:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b6b2a:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b6b3a:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b6b4a:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b6b5a:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b6b6a:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b6b7a:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b6b8a:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b6b9a:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b6baa:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b6bba:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b6bca:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b6bda:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b6bea:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b6bfa:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b6c0a:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b6c1a:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b6c2a:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b6c3a:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b6c4a:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b6c5a:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b6c6a:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b6c7a:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b6c8a:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b6c9a:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b6caa:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b6cba:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b6cca:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b6cda:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b6cea:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b6cfa:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b6d0a:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b6d1a:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b6d2a:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b6d3a:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b6d4a:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b6d5a:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b6d6a:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b6d7a:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b6d8a:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b6d9a:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b6daa:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b6dba:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b6dca:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b6dda:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b6dea:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b6dfa:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b6e0a:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b6e1a:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b6e2a:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b6e3a:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b6e4a:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b6e5a:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b6e6a:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b6e7a:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b6e8a:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b6e9a:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b6eaa:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b6eba:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b6eca:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b6eda:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b6eea:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b6efa:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b6f0a:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b6f1a:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b6f2a:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b6f3a:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b6f4a:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b6f5a:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b6f6a:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b6f7a:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b6f8a:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b6f9a:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b6faa:	0012 3c3c 3c3c 0000 0000 0000 0000          ..<<<<........

000b6fb8 <_ZTV12Adafruit_GFX>:
	...
   b6fc8:	4581 000b 5619 000b 409d 000b 4299 000b     .E...V...@...B..
   b6fd8:	43bf 000b 43db 000b 4357 000b 43f5 000b     .C...C..WC...C..
   b6fe8:	442b 000b 4447 000b                         +D..GD..

000b6ff0 <_ZTV16Adafruit_SSD1306>:
	...
   b6ff8:	40c1 000b 4201 000b 4581 000b 5619 000b     .@...B...E...V..
   b7008:	48f5 000b 4299 000b 4781 000b 4611 000b     .H...B...G...F..
   b7018:	4357 000b 43f5 000b 442b 000b 4447 000b     WC...C..+D..GD..

000b7028 <_ZTVN5spark13EthernetClassE>:
	...
   b7030:	52f3 000b 52e9 000b 52df 000b 52d5 000b     .R...R...R...R..
   b7040:	52c9 000b 52bd 000b 54f5 000b 54fd 000b     .R...R...T...T..
   b7050:	52b1 000b 52a9 000b 529f 000b 5295 000b     .R...R...R...R..
   b7060:	552d 000b                                   -U..

000b7064 <_ZTV7TwoWire>:
	...
   b706c:	5311 000b 535b 000b 5333 000b 5313 000b     .S..[S..3S...S..
   b707c:	533b 000b 5343 000b 534b 000b 5353 000b     ;S..CS..KS..SS..

000b708c <_ZTV9IPAddress>:
	...
   b7094:	53c5 000b 53b5 000b 53b7 000b 7061 0070     .S...S...S..app.

000b70a4 <_ZTVN5spark12NetworkClassE>:
	...
   b70ac:	54b5 000b 54bf 000b 54c9 000b 54d3 000b     .T...T...T...T..
   b70bc:	54dd 000b 54e9 000b 54f5 000b 54fd 000b     .T...T...T...T..
   b70cc:	5505 000b 5511 000b 5519 000b 5523 000b     .U...U...U..#U..
   b70dc:	552d 000b                                   -U..

000b70e0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b70e0:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b70f0:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b7100:	6d69 0065                                   ime.

000b7104 <_ZTV11USARTSerial>:
	...
   b710c:	5ba9 000b 5c15 000b 5bed 000b 5619 000b     .[...\...[...V..
   b711c:	5bbd 000b 5bd9 000b 5bcb 000b 5be7 000b     .[...[...[...[..
   b712c:	5bab 000b 5baf 000b                         .[...[..

000b7134 <_ZTV9USBSerial>:
	...
   b713c:	5ca9 000b 5d11 000b 5ce7 000b 5619 000b     .\...]...\...V..
   b714c:	5cd9 000b 5cab 000b 5cbb 000b 5d0b 000b     .\...\...\...]..
   b715c:	5ccb 000b 5ca5 000b                         .\...\..

000b7164 <_ZTVN5spark9WiFiClassE>:
	...
   b716c:	5e13 000b 5e09 000b 5dff 000b 5db5 000b     .^...^...]...]..
   b717c:	5df3 000b 5de7 000b 54f5 000b 54fd 000b     .]...]...T...T..
   b718c:	5ddb 000b 5dd3 000b 5dc9 000b 5dbf 000b     .]...]...]...]..
   b719c:	552d 000b                                   -U..

000b71a0 <_ZSt7nothrow>:
   b71a0:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   b71b0:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000b71c1 <day_name.1>:
   b71c1:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   b71d1:	6972 6153                                    riSat

000b71d6 <mon_name.0>:
   b71d6:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   b71e6:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   b71f6:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   b7206:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   b7216:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   b7226:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   b7236:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   b7246:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   b7256:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
   b7266:	2e64 0063                                   d.c.

000b726a <link_const_variable_data_end>:
	...

000b726c <link_constructors_location>:
   b726c:	000b4211 	.word	0x000b4211
   b7270:	000b526d 	.word	0x000b526d
   b7274:	000b52fd 	.word	0x000b52fd
   b7278:	000b54a5 	.word	0x000b54a5
   b727c:	000b5605 	.word	0x000b5605
   b7280:	000b5745 	.word	0x000b5745
   b7284:	000b5a29 	.word	0x000b5a29
   b7288:	000b5b95 	.word	0x000b5b95
   b728c:	000b5e1d 	.word	0x000b5e1d
